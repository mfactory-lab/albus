/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AddValidator
 * @category generated
 */
export const addValidatorStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'AddValidatorInstructionArgs',
)
/**
 * Accounts required by the _addValidator_ instruction
 *
 * @property [] zkpRequest
 * @property [**signer**] staker
 * @property [_writable_, **signer**] funder
 * @property [_writable_] stakePool
 * @property [_writable_] validatorListStorage
 * @property [] stakePoolWithdrawAuthority
 * @property [_writable_] stake
 * @property [] validator
 * @property [] stakeProgram
 * @property [] stakeConfig
 * @property [] stakePoolProgram
 * @property [] clock
 * @property [] stakeHistory
 * @category Instructions
 * @category AddValidator
 * @category generated
 */
export interface AddValidatorInstructionAccounts {
  zkpRequest: web3.PublicKey
  staker: web3.PublicKey
  funder: web3.PublicKey
  stakePool: web3.PublicKey
  validatorListStorage: web3.PublicKey
  stakePoolWithdrawAuthority: web3.PublicKey
  stake: web3.PublicKey
  validator: web3.PublicKey
  stakeProgram: web3.PublicKey
  stakeConfig: web3.PublicKey
  stakePoolProgram: web3.PublicKey
  rent?: web3.PublicKey
  clock: web3.PublicKey
  stakeHistory: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addValidatorInstructionDiscriminator = [
  250, 113, 53, 54, 141, 117, 215, 185,
]

/**
 * Creates a _AddValidator_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category AddValidator
 * @category generated
 */
export function createAddValidatorInstruction(
  accounts: AddValidatorInstructionAccounts,
  programId = new web3.PublicKey('HN5hBpR28T8Mjkm1CB1D8Hj5z5rHQ7VkD2ZWmZtFk49e'),
) {
  const [data] = addValidatorStruct.serialize({
    instructionDiscriminator: addValidatorInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.zkpRequest,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.staker,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.funder,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.stakePool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.validatorListStorage,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePoolWithdrawAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stake,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.validator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeConfig,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePoolProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeHistory,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
