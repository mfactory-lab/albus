/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category DepositStake
 * @category generated
 */
export const depositStakeStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'DepositStakeInstructionArgs'
)
/**
 * Accounts required by the _depositStake_ instruction
 *
 * @property [] zkpRequest
 * @property [_writable_, **signer**] authority
 * @property [_writable_] stakePool
 * @property [_writable_] validatorListStorage
 * @property [] stakePoolWithdrawAuthority
 * @property [] stakePoolDepositAuthority
 * @property [_writable_] depositStake
 * @property [_writable_] validatorStake
 * @property [_writable_] reserveStake
 * @property [_writable_] poolTokensTo
 * @property [_writable_] managerFeeAccount
 * @property [_writable_] referrerPoolTokensAccount
 * @property [_writable_] poolMint
 * @property [] stakeProgram
 * @property [] stakeHistory
 * @property [] clock
 * @category Instructions
 * @category DepositStake
 * @category generated
 */
export type DepositStakeInstructionAccounts = {
  zkpRequest: web3.PublicKey
  authority: web3.PublicKey
  stakePool: web3.PublicKey
  validatorListStorage: web3.PublicKey
  stakePoolWithdrawAuthority: web3.PublicKey
  stakePoolDepositAuthority: web3.PublicKey
  depositStake: web3.PublicKey
  validatorStake: web3.PublicKey
  reserveStake: web3.PublicKey
  poolTokensTo: web3.PublicKey
  managerFeeAccount: web3.PublicKey
  referrerPoolTokensAccount: web3.PublicKey
  poolMint: web3.PublicKey
  tokenProgram?: web3.PublicKey
  stakeProgram: web3.PublicKey
  stakeHistory: web3.PublicKey
  clock: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const depositStakeInstructionDiscriminator = [
  160, 167, 9, 220, 74, 243, 228, 43,
]

/**
 * Creates a _DepositStake_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category DepositStake
 * @category generated
 */
export function createDepositStakeInstruction(
  accounts: DepositStakeInstructionAccounts,
  programId = new web3.PublicKey('HN5hBpR28T8Mjkm1CB1D8Hj5z5rHQ7VkD2ZWmZtFk49e')
) {
  const [data] = depositStakeStruct.serialize({
    instructionDiscriminator: depositStakeInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.zkpRequest,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.stakePool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.validatorListStorage,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePoolWithdrawAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePoolDepositAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.depositStake,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.validatorStake,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reserveStake,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.poolTokensTo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.managerFeeAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.referrerPoolTokensAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.poolMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeHistory,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
