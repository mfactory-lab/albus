/*
 * This file is part of Albus code.
 *
 * Copyright (c) 2023, mFactory GmbH
 *
 * Albus is free software: you can redistribute it
 * and/or modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * Albus is distributed in the hope that it
 * will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.
 * If not, see <https://www.gnu.org/licenses/agpl-3.0.html>.
 *
 * You can be released from the requirements of the Affero GNU General Public License
 * by purchasing a commercial license. The purchase of such a license is
 * mandatory as soon as you develop commercial activities using the
 * Albus code without disclosing the source code of
 * your own applications.
 *
 * The developer of this program can be contacted at <info@albus.finance>.
 */

use ark_serialize::{CanonicalDeserialize, CanonicalSerialize, Compress, Validate};
use solana_program::alt_bn128::prelude::{
    alt_bn128_addition, alt_bn128_multiplication, alt_bn128_pairing, AltBn128Error,
    ALT_BN128_FIELD_SIZE,
};

const G1_SIZE: usize = ALT_BN128_FIELD_SIZE * 2;
const G2_SIZE: usize = ALT_BN128_FIELD_SIZE * 4;

pub type F = [u8; ALT_BN128_FIELD_SIZE];
pub type G1 = [u8; G1_SIZE];
pub type G2 = [u8; G2_SIZE];

pub type PublicInputs = Vec<F>;

#[derive(PartialEq, Eq, Debug)]
pub struct VK {
    pub alpha: G1,
    pub beta: G2,
    pub gamma: G2,
    pub delta: G2,
    pub ic: Vec<G1>,
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Proof {
    a: G1,
    b: G2,
    c: G1,
}

impl Proof {
    pub fn new(a: G1, b: G2, c: G1) -> Self {
        Self { a, b, c }
    }
}

impl From<(G1, G2, G1)> for Proof {
    fn from(value: (G1, G2, G1)) -> Self {
        Self::new(value.0, value.1, value.2)
    }
}

impl Proof {
    fn validate(&self) -> Result<(), Groth16Error> {
        if self.a.len() != G1_SIZE || self.b.len() != G2_SIZE || self.c.len() != G1_SIZE {
            Err(Groth16Error::InvalidProof)
        } else {
            Ok(())
        }
    }
}

#[derive(PartialEq, Eq, Debug)]
pub struct Groth16Verifier {
    proof: Proof,
    public_inputs: Vec<[u8; ALT_BN128_FIELD_SIZE]>,
    vk: VK,
}

impl Groth16Verifier {
    pub fn new(proof: Proof, public_inputs: PublicInputs, vk: VK) -> Result<Self, Groth16Error> {
        proof.validate()?;

        if public_inputs.len() + 1 != vk.ic.len() {
            return Err(Groth16Error::InvalidPublicInputs);
        }

        Ok(Self {
            proof,
            public_inputs,
            vk,
        })
    }

    pub fn verify(&self) -> Result<bool, Groth16Error> {
        let mut acc = self.vk.ic[0];
        for (i, b) in self.public_inputs.iter().zip(self.vk.ic.iter().skip(1)) {
            let mul_res = alt_bn128_multiplication(&[&b[..], &i[..]].concat())
                .map_err(Groth16Error::AltBn128Error)?;
            acc = alt_bn128_addition(&[&mul_res[..], &acc[..]].concat())
                .map_err(Groth16Error::AltBn128Error)?
                .try_into()
                .expect("conversion failed");
        }

        let input = [
            self.proof.a.as_slice(),
            self.proof.b.as_slice(),
            acc.as_slice(),
            self.vk.gamma.as_slice(),
            self.proof.c.as_slice(),
            self.vk.delta.as_slice(),
            self.vk.alpha.as_slice(),
            self.vk.beta.as_slice(),
        ]
        .concat();

        let res = alt_bn128_pairing(input.as_slice()).map_err(Groth16Error::AltBn128Error)?;

        if res[31] != 1 {
            return Err(Groth16Error::VerificationFailed);
        }

        Ok(true)
    }
}

#[derive(Clone, Debug, Eq, PartialEq)]
pub enum Groth16Error {
    AltBn128Error(AltBn128Error),
    InvalidProof,
    InvalidPublicInputs,
    VerificationFailed,
}

pub fn alt_bn128_g1_neg(input: &[u8]) -> Result<Vec<u8>, AltBn128Error> {
    use std::ops::Neg;
    type G1 = ark_bn254::g1::G1Affine;
    let g1 = G1::deserialize_with_mode(
        &*[&change_endianness(input)[..], &[0u8][..]].concat(),
        Compress::No,
        Validate::Yes,
    );

    match g1 {
        Ok(g1) => {
            if !g1.is_on_curve() {
                Err(AltBn128Error::GroupError)
            } else {
                let mut g1_neg = [0u8; 65];
                G1::serialize_with_mode(&g1.neg(), &mut g1_neg[..], Compress::No)
                    .map_err(|_| AltBn128Error::InvalidInputData)?;
                Ok(change_endianness(&g1_neg[..64]))
            }
        }
        Err(_) => Err(AltBn128Error::InvalidInputData),
    }
}

fn change_endianness(bytes: &[u8]) -> Vec<u8> {
    let mut vec = Vec::new();
    for b in bytes.chunks(32) {
        for byte in b.iter().rev() {
            vec.push(*byte);
        }
    }
    vec
}

#[cfg(test)]
mod tests {
    use super::*;

    fn test_data<'a>() -> (VK, &'a [[u8; 32]], [u8; 256]) {
        (
            VK {
                alpha: [
                    45, 77, 154, 167, 227, 2, 217, 223, 65, 116, 157, 85, 7, 148, 157, 5, 219, 234,
                    51, 251, 177, 108, 100, 59, 34, 245, 153, 162, 190, 109, 242, 226, 20, 190,
                    221, 80, 60, 55, 206, 176, 97, 216, 236, 96, 32, 159, 227, 69, 206, 137, 131,
                    10, 25, 35, 3, 1, 240, 118, 202, 255, 0, 77, 25, 38,
                ],
                beta: [
                    9, 103, 3, 47, 203, 247, 118, 209, 175, 201, 133, 248, 136, 119, 241, 130, 211,
                    132, 128, 166, 83, 242, 222, 202, 169, 121, 76, 188, 59, 243, 6, 12, 14, 24,
                    120, 71, 173, 76, 121, 131, 116, 208, 214, 115, 43, 245, 1, 132, 125, 214, 139,
                    192, 224, 113, 36, 30, 2, 19, 188, 127, 193, 61, 183, 171, 48, 76, 251, 209,
                    224, 138, 112, 74, 153, 245, 232, 71, 217, 63, 140, 60, 170, 253, 222, 196,
                    107, 122, 13, 55, 157, 166, 154, 77, 17, 35, 70, 167, 23, 57, 193, 177, 164,
                    87, 168, 199, 49, 49, 35, 210, 77, 47, 145, 146, 248, 150, 183, 198, 62, 234,
                    5, 169, 213, 127, 6, 84, 122, 208, 206, 200,
                ],
                gamma: [
                    25, 142, 147, 147, 146, 13, 72, 58, 114, 96, 191, 183, 49, 251, 93, 37, 241,
                    170, 73, 51, 53, 169, 231, 18, 151, 228, 133, 183, 174, 243, 18, 194, 24, 0,
                    222, 239, 18, 31, 30, 118, 66, 106, 0, 102, 94, 92, 68, 121, 103, 67, 34, 212,
                    247, 94, 218, 221, 70, 222, 189, 92, 217, 146, 246, 237, 9, 6, 137, 208, 88,
                    95, 240, 117, 236, 158, 153, 173, 105, 12, 51, 149, 188, 75, 49, 51, 112, 179,
                    142, 243, 85, 172, 218, 220, 209, 34, 151, 91, 18, 200, 94, 165, 219, 140, 109,
                    235, 74, 171, 113, 128, 141, 203, 64, 143, 227, 209, 231, 105, 12, 67, 211,
                    123, 76, 230, 204, 1, 102, 250, 125, 170,
                ],
                delta: [
                    25, 142, 147, 147, 146, 13, 72, 58, 114, 96, 191, 183, 49, 251, 93, 37, 241,
                    170, 73, 51, 53, 169, 231, 18, 151, 228, 133, 183, 174, 243, 18, 194, 24, 0,
                    222, 239, 18, 31, 30, 118, 66, 106, 0, 102, 94, 92, 68, 121, 103, 67, 34, 212,
                    247, 94, 218, 221, 70, 222, 189, 92, 217, 146, 246, 237, 9, 6, 137, 208, 88,
                    95, 240, 117, 236, 158, 153, 173, 105, 12, 51, 149, 188, 75, 49, 51, 112, 179,
                    142, 243, 85, 172, 218, 220, 209, 34, 151, 91, 18, 200, 94, 165, 219, 140, 109,
                    235, 74, 171, 113, 128, 141, 203, 64, 143, 227, 209, 231, 105, 12, 67, 211,
                    123, 76, 230, 204, 1, 102, 250, 125, 170,
                ],
                ic: vec![
                    [
                        18, 123, 103, 241, 72, 151, 76, 17, 220, 50, 117, 26, 82, 233, 167, 51,
                        119, 84, 197, 31, 54, 183, 213, 12, 44, 141, 224, 203, 53, 161, 233, 83,
                        42, 10, 213, 52, 58, 239, 250, 55, 114, 117, 142, 108, 97, 206, 25, 209,
                        160, 165, 49, 207, 211, 167, 208, 220, 245, 107, 245, 98, 114, 190, 203,
                        128,
                    ],
                    [
                        32, 140, 29, 45, 253, 105, 66, 145, 191, 58, 238, 180, 171, 7, 61, 213,
                        245, 126, 91, 26, 131, 33, 206, 33, 181, 15, 58, 230, 93, 150, 204, 87, 7,
                        206, 226, 9, 214, 11, 43, 178, 136, 220, 98, 15, 27, 228, 19, 147, 99, 82,
                        18, 114, 237, 69, 193, 188, 144, 233, 128, 129, 216, 202, 126, 58,
                    ],
                    [
                        43, 175, 111, 178, 20, 117, 26, 110, 117, 33, 158, 253, 250, 15, 117, 172,
                        123, 92, 146, 94, 53, 31, 78, 169, 69, 155, 223, 164, 152, 194, 98, 98, 1,
                        196, 198, 60, 222, 196, 157, 94, 230, 247, 75, 47, 70, 110, 4, 139, 81, 2,
                        164, 253, 146, 194, 225, 189, 60, 153, 252, 91, 1, 195, 12, 166,
                    ],
                    [
                        1, 8, 74, 17, 183, 148, 79, 145, 146, 145, 165, 125, 129, 139, 129, 2, 192,
                        175, 107, 115, 73, 3, 147, 150, 255, 15, 12, 124, 82, 52, 74, 5, 8, 240,
                        34, 26, 84, 45, 130, 148, 29, 176, 151, 168, 55, 91, 36, 7, 187, 31, 154,
                        68, 204, 232, 206, 87, 119, 125, 111, 164, 209, 5, 2, 87,
                    ],
                    [
                        28, 75, 62, 251, 196, 251, 1, 144, 93, 232, 75, 36, 105, 83, 146, 25, 229,
                        192, 9, 124, 157, 45, 10, 92, 83, 103, 236, 79, 38, 159, 62, 55, 23, 233,
                        255, 50, 32, 226, 193, 101, 124, 53, 47, 102, 153, 160, 44, 181, 234, 90,
                        6, 100, 16, 94, 72, 249, 121, 183, 23, 210, 86, 40, 224, 194,
                    ],
                    [
                        29, 120, 123, 107, 94, 161, 147, 23, 41, 133, 114, 255, 90, 118, 185, 237,
                        150, 221, 105, 63, 85, 207, 233, 5, 53, 232, 27, 116, 23, 144, 34, 235, 35,
                        219, 242, 170, 191, 239, 196, 35, 9, 47, 183, 150, 186, 225, 118, 43, 117,
                        225, 244, 91, 4, 151, 220, 167, 144, 3, 40, 103, 139, 102, 52, 107,
                    ],
                    [
                        1, 161, 64, 100, 116, 175, 246, 50, 52, 236, 18, 178, 231, 162, 218, 157,
                        232, 225, 163, 164, 116, 101, 98, 171, 243, 167, 233, 83, 241, 12, 240, 50,
                        32, 224, 122, 98, 98, 211, 143, 234, 102, 248, 82, 190, 150, 206, 102, 245,
                        216, 36, 89, 162, 19, 46, 133, 228, 178, 245, 163, 133, 255, 194, 47, 125,
                    ],
                    [
                        45, 235, 90, 106, 123, 214, 30, 70, 33, 189, 52, 170, 62, 104, 101, 162,
                        138, 211, 97, 151, 82, 4, 207, 178, 42, 46, 53, 36, 223, 64, 88, 63, 40,
                        215, 100, 148, 117, 17, 201, 101, 199, 155, 91, 226, 253, 162, 177, 22,
                        125, 39, 31, 119, 101, 105, 105, 58, 193, 170, 94, 163, 219, 170, 95, 165,
                    ],
                    [
                        37, 132, 176, 119, 100, 55, 99, 18, 165, 121, 16, 31, 110, 16, 89, 223,
                        125, 60, 0, 53, 69, 147, 240, 164, 137, 51, 81, 101, 233, 174, 60, 144, 30,
                        222, 32, 212, 62, 203, 49, 51, 231, 101, 171, 41, 27, 205, 30, 43, 31, 197,
                        169, 158, 23, 227, 126, 134, 187, 247, 7, 28, 49, 77, 154, 15,
                    ],
                    [
                        33, 103, 191, 81, 131, 196, 248, 109, 88, 237, 127, 111, 1, 16, 187, 31,
                        100, 183, 1, 240, 235, 254, 136, 241, 105, 63, 70, 178, 26, 10, 70, 62, 44,
                        138, 119, 106, 207, 217, 110, 26, 82, 109, 65, 111, 252, 175, 132, 137, 92,
                        167, 218, 34, 183, 156, 251, 239, 190, 17, 207, 106, 170, 118, 128, 232,
                    ],
                    [
                        9, 174, 212, 220, 122, 62, 165, 213, 123, 175, 147, 149, 187, 162, 79, 105,
                        92, 100, 118, 117, 210, 81, 41, 56, 108, 167, 76, 228, 75, 92, 121, 132,
                        24, 8, 219, 107, 144, 77, 46, 109, 141, 250, 216, 128, 17, 85, 101, 105,
                        227, 101, 65, 79, 52, 76, 208, 121, 98, 51, 97, 36, 30, 178, 184, 124,
                    ],
                    [
                        29, 39, 181, 206, 86, 227, 25, 157, 22, 141, 210, 195, 51, 76, 55, 216,
                        216, 106, 177, 102, 172, 75, 76, 189, 35, 54, 146, 161, 13, 254, 37, 113,
                        17, 37, 164, 199, 146, 92, 224, 32, 244, 54, 254, 53, 78, 179, 120, 245,
                        88, 85, 87, 44, 20, 49, 44, 26, 251, 224, 251, 176, 231, 192, 217, 119,
                    ],
                    [
                        23, 132, 242, 132, 20, 136, 76, 146, 174, 241, 224, 53, 212, 101, 80, 158,
                        221, 171, 0, 100, 181, 122, 25, 248, 126, 166, 172, 128, 160, 84, 250, 211,
                        10, 247, 0, 63, 188, 47, 173, 252, 238, 88, 67, 67, 80, 143, 36, 146, 169,
                        20, 112, 71, 243, 207, 56, 246, 147, 222, 173, 66, 98, 197, 186, 44,
                    ],
                    [
                        5, 217, 102, 209, 61, 81, 142, 4, 219, 212, 97, 234, 98, 207, 43, 232, 145,
                        212, 157, 32, 207, 115, 89, 81, 209, 117, 202, 117, 38, 16, 183, 235, 26,
                        22, 134, 141, 10, 67, 252, 179, 23, 69, 86, 66, 226, 92, 212, 218, 114, 76,
                        27, 114, 78, 26, 244, 249, 178, 132, 219, 94, 205, 205, 174, 245,
                    ],
                    [
                        43, 16, 188, 63, 28, 87, 127, 242, 78, 170, 192, 236, 117, 157, 21, 17, 77,
                        184, 102, 172, 245, 253, 248, 236, 187, 156, 182, 75, 179, 180, 43, 176,
                        41, 180, 235, 133, 120, 150, 121, 157, 58, 216, 141, 148, 252, 92, 74, 5,
                        162, 96, 79, 240, 234, 49, 165, 142, 128, 140, 17, 183, 109, 196, 139, 182,
                    ],
                    [
                        46, 1, 117, 223, 245, 190, 9, 9, 88, 115, 5, 207, 64, 138, 82, 134, 72,
                        248, 133, 135, 21, 179, 12, 141, 23, 44, 248, 166, 17, 215, 171, 112, 6,
                        62, 180, 161, 140, 122, 47, 16, 114, 189, 68, 15, 204, 70, 73, 205, 213,
                        40, 242, 167, 129, 48, 50, 200, 232, 251, 167, 67, 236, 242, 241, 84,
                    ],
                    [
                        39, 141, 185, 71, 238, 184, 74, 77, 169, 188, 144, 78, 22, 181, 238, 7, 22,
                        233, 238, 25, 80, 131, 3, 119, 7, 69, 65, 227, 61, 13, 136, 206, 41, 121,
                        21, 106, 194, 142, 207, 20, 104, 111, 207, 82, 56, 162, 37, 160, 73, 97,
                        183, 147, 16, 56, 10, 125, 115, 201, 224, 33, 98, 49, 223, 43,
                    ],
                    [
                        46, 71, 78, 222, 225, 87, 138, 65, 164, 126, 210, 240, 252, 12, 121, 35,
                        135, 177, 75, 18, 175, 95, 47, 253, 27, 164, 107, 206, 93, 44, 193, 207, 1,
                        64, 85, 223, 236, 133, 121, 26, 217, 106, 231, 211, 212, 42, 139, 150, 11,
                        144, 61, 59, 193, 139, 161, 161, 121, 97, 104, 174, 188, 58, 12, 181,
                    ],
                    [
                        1, 252, 71, 0, 219, 250, 115, 96, 43, 58, 164, 93, 220, 28, 162, 2, 149,
                        197, 205, 197, 121, 186, 110, 190, 251, 98, 70, 205, 9, 140, 147, 171, 29,
                        115, 63, 226, 75, 3, 42, 63, 233, 10, 183, 36, 173, 9, 183, 141, 222, 28,
                        204, 225, 223, 195, 227, 220, 29, 129, 251, 201, 78, 189, 66, 45,
                    ],
                    [
                        40, 116, 23, 167, 224, 247, 37, 10, 188, 200, 139, 2, 217, 61, 250, 118,
                        39, 162, 92, 3, 246, 170, 139, 246, 110, 94, 250, 77, 93, 26, 37, 246, 35,
                        177, 135, 178, 65, 170, 166, 76, 190, 213, 217, 74, 217, 45, 177, 133, 3,
                        249, 254, 30, 126, 43, 78, 155, 10, 121, 53, 175, 192, 2, 120, 132,
                    ],
                    [
                        9, 46, 109, 157, 16, 114, 123, 192, 174, 90, 10, 81, 132, 212, 102, 51,
                        135, 64, 78, 114, 130, 247, 152, 196, 125, 105, 200, 113, 138, 0, 13, 127,
                        31, 249, 117, 28, 178, 154, 16, 79, 243, 63, 150, 120, 150, 251, 43, 79,
                        52, 159, 92, 61, 238, 49, 252, 221, 221, 30, 200, 220, 156, 236, 192, 70,
                    ],
                ],
            },
            &[
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 1, 52, 178, 55,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 18,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 100,
                ],
                [
                    31, 119, 83, 102, 156, 80, 46, 74, 189, 115, 145, 57, 54, 48, 37, 112, 214,
                    201, 93, 233, 175, 9, 160, 185, 143, 110, 154, 37, 112, 75, 84, 95,
                ],
                [
                    6, 223, 73, 239, 218, 105, 167, 129, 249, 203, 159, 168, 249, 219, 44, 253, 1,
                    0, 143, 207, 134, 105, 116, 73, 7, 216, 226, 189, 57, 37, 6, 123,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 1,
                ],
                [
                    9, 6, 163, 54, 193, 168, 75, 217, 215, 81, 234, 218, 228, 31, 170, 140, 123,
                    77, 98, 5, 241, 127, 125, 207, 221, 115, 169, 134, 167, 108, 94, 129,
                ],
                [
                    37, 10, 21, 207, 2, 138, 174, 20, 209, 50, 142, 174, 77, 11, 223, 116, 78, 77,
                    35, 235, 251, 75, 244, 177, 157, 163, 225, 187, 9, 107, 39, 130,
                ],
                [
                    9, 93, 189, 198, 127, 115, 77, 221, 6, 46, 7, 135, 49, 227, 157, 32, 238, 54,
                    187, 4, 197, 140, 173, 11, 248, 101, 69, 248, 238, 214, 49, 73,
                ],
                [
                    44, 7, 151, 217, 107, 44, 86, 136, 49, 120, 164, 238, 96, 145, 179, 114, 15,
                    58, 92, 159, 245, 229, 12, 219, 29, 30, 48, 48, 222, 167, 223, 33,
                ],
                [
                    1, 42, 120, 191, 218, 108, 103, 243, 40, 166, 21, 196, 213, 196, 112, 140, 223,
                    167, 41, 164, 240, 237, 137, 44, 74, 106, 41, 134, 222, 61, 34, 121,
                ],
            ],
            [
                9, 106, 26, 228, 47, 110, 130, 211, 2, 31, 179, 116, 140, 194, 32, 89, 104, 122,
                149, 77, 8, 255, 202, 68, 180, 249, 112, 39, 136, 71, 41, 57, 28, 102, 136, 211,
                149, 68, 157, 168, 136, 45, 134, 248, 15, 25, 105, 106, 95, 74, 3, 70, 193, 139,
                64, 170, 162, 97, 208, 114, 63, 176, 166, 29, 21, 35, 114, 92, 108, 121, 11, 157,
                131, 149, 92, 20, 67, 126, 100, 155, 196, 168, 116, 178, 55, 225, 28, 57, 136, 14,
                169, 89, 203, 131, 240, 174, 28, 166, 154, 128, 176, 60, 123, 183, 244, 137, 207,
                13, 29, 120, 95, 34, 153, 136, 108, 230, 12, 241, 175, 47, 43, 183, 6, 175, 205,
                96, 103, 216, 16, 208, 126, 35, 138, 169, 217, 81, 19, 127, 95, 46, 234, 35, 28,
                33, 152, 216, 101, 149, 25, 25, 27, 171, 27, 124, 11, 110, 161, 128, 54, 188, 20,
                115, 221, 68, 22, 181, 209, 224, 94, 87, 245, 140, 12, 62, 69, 26, 67, 123, 105,
                81, 65, 18, 181, 1, 123, 98, 230, 110, 131, 58, 133, 24, 31, 233, 80, 175, 169,
                187, 170, 137, 165, 71, 3, 225, 142, 208, 215, 19, 227, 109, 224, 226, 118, 121,
                10, 198, 241, 77, 185, 8, 17, 155, 139, 131, 30, 179, 99, 63, 134, 187, 153, 153,
                71, 120, 30, 183, 135, 147, 40, 232, 14, 13, 178, 126, 120, 109, 242, 62, 70, 80,
                110, 72, 4, 225, 106, 171,
            ],
        )
    }

    #[test]
    fn test1() {
        let (vk, public_inputs, proof) = test_data();
        let proof_a = &alt_bn128_g1_neg(&proof[..64]).unwrap()[..];

        // println!("{:?}", &proof[..64]);
        // println!("{:?}", proof_a);

        let proof = Proof {
            a: proof_a.try_into().unwrap(),
            b: proof[64..192].try_into().unwrap(),
            c: proof[192..256].try_into().unwrap(),
        };

        let verifier = Groth16Verifier::new(proof, public_inputs.to_vec(), vk).unwrap();

        // println!("{:?}", verifier.verify());
        assert!(verifier.verify().unwrap());
    }
}
