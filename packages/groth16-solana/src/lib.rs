/*
 * This file is part of Albus code.
 *
 * Copyright (c) 2023, mFactory GmbH
 *
 * Albus is free software: you can redistribute it
 * and/or modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * Albus is distributed in the hope that it
 * will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.
 * If not, see <https://www.gnu.org/licenses/agpl-3.0.html>.
 *
 * You can be released from the requirements of the Affero GNU General Public License
 * by purchasing a commercial license. The purchase of such a license is
 * mandatory as soon as you develop commercial activities using the
 * Albus code without disclosing the source code of
 * your own applications.
 *
 * The developer of this program can be contacted at <info@albus.finance>.
 */

use solana_program::alt_bn128::prelude::{
    alt_bn128_addition, alt_bn128_multiplication, alt_bn128_pairing, AltBn128Error,
    ALT_BN128_FIELD_SIZE,
};

const G1_SIZE: usize = ALT_BN128_FIELD_SIZE * 2;
const G2_SIZE: usize = ALT_BN128_FIELD_SIZE * 4;

pub type F = [u8; ALT_BN128_FIELD_SIZE];
pub type G1 = [u8; G1_SIZE];
pub type G2 = [u8; G2_SIZE];

#[derive(PartialEq, Eq, Debug)]
pub struct VK {
    pub alpha: G1,
    pub beta: G2,
    pub gamma: G2,
    pub delta: G2,
    pub ic: Vec<G1>,
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Proof {
    a: G1,
    b: G2,
    c: G1,
}

impl Proof {
    pub fn new(a: G1, b: G2, c: G1) -> Self {
        Self { a, b, c }
    }
}

impl From<(G1, G2, G1)> for Proof {
    fn from(value: (G1, G2, G1)) -> Self {
        Self::new(value.0, value.1, value.2)
    }
}

impl Proof {
    fn validate(&self) -> Result<(), Groth16Error> {
        if self.a.len() != G1_SIZE || self.b.len() != G2_SIZE || self.c.len() != G1_SIZE {
            Err(Groth16Error::InvalidProof)
        } else {
            Ok(())
        }
    }
}

#[derive(PartialEq, Eq, Debug)]
pub struct Groth16Verifier<'a> {
    proof: &'a Proof,
    public_inputs: &'a [[u8; ALT_BN128_FIELD_SIZE]],
    vk: &'a VK,
}

impl<'a> Groth16Verifier<'a> {
    pub fn new(proof: &'a Proof, public_inputs: &'a [F], vk: &'a VK) -> Result<Self, Groth16Error> {
        proof.validate()?;

        if public_inputs.len() + 1 != vk.ic.len() {
            return Err(Groth16Error::InvalidPublicInputs);
        }

        Ok(Self {
            proof,
            public_inputs,
            vk,
        })
    }

    pub fn verify(&self) -> Result<bool, Groth16Error> {
        let mut acc = self.vk.ic[0];
        let mut input = [u8::default(); G1_SIZE + ALT_BN128_FIELD_SIZE];
        // let mut input = Vec::with_capacity(G1_SIZE + ALT_BN128_FIELD_SIZE);

        for (i, ic) in self.public_inputs.iter().zip(self.vk.ic.iter().skip(1)) {
            input[..G1_SIZE].copy_from_slice(ic);
            input[G1_SIZE..].copy_from_slice(i);

            // input.clear();
            // input.extend_from_slice(ic);
            // input.extend_from_slice(i);

            let mut mul_res =
                alt_bn128_multiplication(&input).map_err(Groth16Error::AltBn128Error)?;

            mul_res.extend_from_slice(&acc);

            acc = alt_bn128_addition(&mul_res)
                .map_err(Groth16Error::AltBn128Error)?
                .try_into()
                .expect("conversion failed");
        }

        // let mut input = [u8::default(); G1_SIZE * 4 + G2_SIZE * 4];
        // input[0..64].copy_from_slice(&self.proof.a);
        // input[64..192].copy_from_slice(&self.proof.b);
        // input[192..256].copy_from_slice(&acc);
        // input[256..384].copy_from_slice(&self.vk.gamma);
        // input[384..448].copy_from_slice(&self.proof.c);
        // input[448..576].copy_from_slice(&self.vk.delta);
        // input[576..640].copy_from_slice(&self.vk.alpha);
        // input[640..768].copy_from_slice(&self.vk.beta);

        let mut input = Vec::with_capacity(G1_SIZE * 4 + G2_SIZE * 4);
        input.extend_from_slice(self.proof.a.as_slice());
        input.extend_from_slice(self.proof.b.as_slice());
        input.extend_from_slice(acc.as_slice());
        input.extend_from_slice(self.vk.gamma.as_slice());
        input.extend_from_slice(self.proof.c.as_slice());
        input.extend_from_slice(self.vk.delta.as_slice());
        input.extend_from_slice(self.vk.alpha.as_slice());
        input.extend_from_slice(self.vk.beta.as_slice());

        let res = alt_bn128_pairing(input.as_slice()).map_err(Groth16Error::AltBn128Error)?;

        if res[31] != 1 {
            return Err(Groth16Error::VerificationFailed);
        }

        Ok(true)
    }
}

#[derive(Clone, Debug, Eq, PartialEq)]
pub enum Groth16Error {
    AltBn128Error(AltBn128Error),
    InvalidProof,
    InvalidPublicInputs,
    VerificationFailed,
}

#[cfg(test)]
mod tests {
    use super::*;
    use ark_serialize::CanonicalDeserialize;
    use ark_serialize::CanonicalSerialize;
    use ark_serialize::Compress;
    use ark_serialize::Validate;

    pub fn alt_bn128_g1_neg(input: &[u8]) -> Result<Vec<u8>, AltBn128Error> {
        use std::ops::Neg;
        type G1 = ark_bn254::g1::G1Affine;
        let g1 = G1::deserialize_with_mode(
            &*[&change_endianness(input)[..], &[0u8][..]].concat(),
            Compress::No,
            Validate::Yes,
        );

        match g1 {
            Ok(g1) => {
                if !g1.is_on_curve() {
                    Err(AltBn128Error::GroupError)
                } else {
                    let mut g1_neg = [0u8; 65];
                    G1::serialize_with_mode(&g1.neg(), &mut g1_neg[..], Compress::No)
                        .map_err(|_| AltBn128Error::InvalidInputData)?;
                    Ok(change_endianness(&g1_neg[..64]))
                }
            }
            Err(_) => Err(AltBn128Error::InvalidInputData),
        }
    }

    fn change_endianness(bytes: &[u8]) -> Vec<u8> {
        let mut vec = Vec::new();
        for b in bytes.chunks(32) {
            for byte in b.iter().rev() {
                vec.push(*byte);
            }
        }
        vec
    }

    #[test]
    fn test1() {
        let (vk, public_inputs, proof) = test_data();
        let proof_a = &alt_bn128_g1_neg(&proof[..64]).unwrap()[..];

        let start_time = std::time::Instant::now();

        let proof = Proof {
            a: proof_a.try_into().unwrap(),
            b: proof[64..192].try_into().unwrap(),
            c: proof[192..256].try_into().unwrap(),
        };

        let verifier = Groth16Verifier::new(&proof, public_inputs, &vk).unwrap();
        assert!(verifier.verify().unwrap());

        let elapsed_time = start_time.elapsed();
        println!("Elapsed time: {:?}", elapsed_time);
    }

    #[test]
    fn test2() {
        let proof = &[
            11, 64, 21, 148, 20, 165, 192, 38, 202, 150, 113, 232, 6, 254, 235, 162, 36, 162, 121,
            5, 104, 157, 15, 33, 132, 40, 113, 221, 102, 195, 38, 41, 20, 51, 132, 98, 80, 169,
            145, 183, 139, 57, 141, 252, 79, 3, 202, 117, 224, 238, 135, 237, 24, 179, 125, 68, 50,
            182, 143, 80, 174, 136, 36, 234, 37, 166, 17, 91, 12, 232, 248, 135, 228, 115, 32, 220,
            44, 127, 70, 157, 171, 247, 85, 81, 110, 74, 45, 252, 53, 229, 193, 240, 1, 208, 177,
            75, 0, 59, 130, 149, 1, 68, 210, 31, 17, 147, 61, 3, 249, 211, 23, 234, 177, 224, 175,
            28, 178, 248, 188, 217, 140, 54, 24, 228, 59, 64, 152, 188, 21, 14, 30, 74, 69, 241,
            154, 27, 110, 246, 243, 170, 14, 122, 157, 183, 169, 241, 162, 22, 203, 196, 99, 155,
            109, 254, 136, 11, 151, 218, 28, 94, 17, 34, 41, 86, 122, 101, 144, 133, 112, 14, 184,
            65, 28, 186, 239, 94, 99, 67, 205, 80, 196, 249, 21, 34, 221, 7, 12, 72, 251, 183, 218,
            186, 42, 92, 163, 39, 107, 157, 121, 176, 201, 48, 150, 246, 51, 117, 92, 37, 162, 178,
            164, 145, 222, 170, 178, 164, 182, 128, 66, 172, 27, 196, 179, 83, 3, 30, 237, 127, 51,
            47, 2, 95, 5, 23, 246, 175, 189, 113, 44, 191, 227, 121, 92, 173, 147, 154, 21, 103,
            25, 110, 142, 213, 166, 184, 191, 83,
        ];

        let signals = &[
            [
                0, 199, 214, 240, 123, 172, 248, 120, 228, 226, 80, 170, 126, 30, 175, 137, 146,
                226, 184, 21, 10, 234, 158, 225, 179, 97, 99, 42, 178, 165, 78, 197,
            ],
            [
                1, 24, 137, 177, 30, 45, 57, 167, 210, 172, 227, 148, 76, 91, 156, 16, 58, 67, 90,
                245, 67, 148, 118, 22, 242, 95, 231, 130, 15, 199, 245, 218,
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0,
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0,
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0,
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0,
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0,
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                1, 52, 178, 73,
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 18,
            ],
            [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 100,
            ],
            [
                24, 125, 217, 174, 133, 40, 203, 118, 245, 106, 154, 122, 19, 50, 71, 225, 18, 147,
                174, 184, 246, 177, 138, 220, 37, 203, 36, 131, 167, 224, 109, 31,
            ],
            [
                46, 19, 226, 114, 3, 228, 121, 0, 203, 132, 50, 204, 165, 145, 251, 3, 242, 141,
                38, 88, 124, 50, 248, 61, 218, 182, 181, 189, 88, 230, 143, 215,
            ],
            [
                45, 183, 198, 89, 118, 191, 150, 159, 106, 184, 128, 72, 245, 119, 147, 210, 107,
                183, 226, 219, 241, 216, 158, 67, 9, 92, 26, 98, 61, 107, 160, 254,
            ],
            [
                46, 196, 175, 216, 123, 42, 24, 178, 16, 98, 164, 254, 143, 46, 79, 106, 229, 141,
                49, 13, 188, 75, 245, 196, 75, 161, 118, 58, 149, 60, 215, 188,
            ],
            [
                34, 59, 233, 132, 237, 149, 239, 141, 62, 114, 113, 160, 135, 11, 50, 26, 18, 8,
                164, 169, 71, 229, 111, 227, 32, 231, 29, 61, 112, 192, 93, 138,
            ],
            [
                3, 173, 23, 227, 2, 43, 181, 73, 139, 193, 142, 183, 238, 255, 98, 64, 170, 184,
                200, 150, 126, 198, 90, 126, 220, 16, 104, 57, 239, 125, 189, 100,
            ],
        ];

        let proof2 = Proof {
            a: [
                1, 234, 160, 2, 233, 104, 32, 70, 94, 193, 232, 54, 242, 178, 253, 192, 111, 61,
                66, 217, 12, 219, 150, 86, 218, 163, 65, 194, 255, 128, 177, 53, 16, 241, 50, 246,
                100, 59, 215, 111, 70, 187, 167, 162, 98, 244, 244, 85, 98, 77, 178, 190, 1, 20,
                191, 142, 161, 237, 127, 9, 233, 26, 116, 181,
            ],
            b: [
                31, 149, 124, 51, 191, 92, 53, 53, 40, 100, 34, 203, 167, 88, 128, 110, 24, 117,
                191, 130, 144, 1, 201, 223, 69, 87, 140, 178, 20, 182, 197, 217, 2, 169, 228, 190,
                181, 213, 24, 91, 29, 210, 149, 197, 188, 3, 68, 199, 207, 36, 154, 61, 247, 46,
                82, 148, 157, 118, 139, 129, 96, 63, 101, 115, 17, 136, 18, 32, 131, 245, 239, 228,
                169, 231, 226, 103, 62, 199, 27, 233, 78, 49, 156, 141, 218, 88, 194, 181, 167, 39,
                152, 199, 143, 187, 39, 189, 17, 42, 190, 206, 124, 146, 122, 130, 207, 238, 104,
                250, 11, 252, 226, 167, 168, 128, 239, 166, 162, 224, 242, 31, 219, 13, 87, 149,
                115, 149, 14, 129,
            ],
            c: [
                32, 120, 217, 191, 143, 47, 42, 173, 165, 13, 50, 155, 192, 141, 232, 118, 236,
                207, 35, 183, 28, 188, 233, 149, 6, 200, 7, 224, 167, 113, 146, 53, 25, 8, 126,
                221, 68, 201, 118, 45, 32, 109, 143, 88, 123, 241, 166, 1, 93, 110, 210, 0, 159,
                96, 66, 69, 11, 188, 1, 65, 111, 163, 88, 183,
            ],
        };

        let vk2 = VK {
            alpha: [
                45, 77, 154, 167, 227, 2, 217, 223, 65, 116, 157, 85, 7, 148, 157, 5, 219, 234, 51,
                251, 177, 108, 100, 59, 34, 245, 153, 162, 190, 109, 242, 226, 20, 190, 221, 80,
                60, 55, 206, 176, 97, 216, 236, 96, 32, 159, 227, 69, 206, 137, 131, 10, 25, 35, 3,
                1, 240, 118, 202, 255, 0, 77, 25, 38,
            ],
            beta: [
                9, 103, 3, 47, 203, 247, 118, 209, 175, 201, 133, 248, 136, 119, 241, 130, 211,
                132, 128, 166, 83, 242, 222, 202, 169, 121, 76, 188, 59, 243, 6, 12, 14, 24, 120,
                71, 173, 76, 121, 131, 116, 208, 214, 115, 43, 245, 1, 132, 125, 214, 139, 192,
                224, 113, 36, 30, 2, 19, 188, 127, 193, 61, 183, 171, 48, 76, 251, 209, 224, 138,
                112, 74, 153, 245, 232, 71, 217, 63, 140, 60, 170, 253, 222, 196, 107, 122, 13, 55,
                157, 166, 154, 77, 17, 35, 70, 167, 23, 57, 193, 177, 164, 87, 168, 199, 49, 49,
                35, 210, 77, 47, 145, 146, 248, 150, 183, 198, 62, 234, 5, 169, 213, 127, 6, 84,
                122, 208, 206, 200,
            ],
            gamma: [
                25, 142, 147, 147, 146, 13, 72, 58, 114, 96, 191, 183, 49, 251, 93, 37, 241, 170,
                73, 51, 53, 169, 231, 18, 151, 228, 133, 183, 174, 243, 18, 194, 24, 0, 222, 239,
                18, 31, 30, 118, 66, 106, 0, 102, 94, 92, 68, 121, 103, 67, 34, 212, 247, 94, 218,
                221, 70, 222, 189, 92, 217, 146, 246, 237, 9, 6, 137, 208, 88, 95, 240, 117, 236,
                158, 153, 173, 105, 12, 51, 149, 188, 75, 49, 51, 112, 179, 142, 243, 85, 172, 218,
                220, 209, 34, 151, 91, 18, 200, 94, 165, 219, 140, 109, 235, 74, 171, 113, 128,
                141, 203, 64, 143, 227, 209, 231, 105, 12, 67, 211, 123, 76, 230, 204, 1, 102, 250,
                125, 170,
            ],
            delta: [
                25, 142, 147, 147, 146, 13, 72, 58, 114, 96, 191, 183, 49, 251, 93, 37, 241, 170,
                73, 51, 53, 169, 231, 18, 151, 228, 133, 183, 174, 243, 18, 194, 24, 0, 222, 239,
                18, 31, 30, 118, 66, 106, 0, 102, 94, 92, 68, 121, 103, 67, 34, 212, 247, 94, 218,
                221, 70, 222, 189, 92, 217, 146, 246, 237, 9, 6, 137, 208, 88, 95, 240, 117, 236,
                158, 153, 173, 105, 12, 51, 149, 188, 75, 49, 51, 112, 179, 142, 243, 85, 172, 218,
                220, 209, 34, 151, 91, 18, 200, 94, 165, 219, 140, 109, 235, 74, 171, 113, 128,
                141, 203, 64, 143, 227, 209, 231, 105, 12, 67, 211, 123, 76, 230, 204, 1, 102, 250,
                125, 170,
            ],
            ic: vec![
                [
                    2, 11, 194, 97, 0, 60, 149, 138, 51, 98, 201, 46, 23, 237, 7, 220, 255, 190,
                    37, 208, 120, 93, 216, 202, 145, 138, 10, 186, 49, 135, 146, 62, 7, 104, 179,
                    102, 243, 236, 202, 249, 241, 189, 217, 25, 143, 205, 208, 99, 108, 109, 26,
                    248, 34, 149, 121, 66, 127, 117, 1, 131, 181, 70, 167, 235,
                ],
                [
                    42, 138, 33, 105, 229, 220, 185, 47, 201, 103, 105, 249, 107, 56, 26, 171, 39,
                    247, 165, 84, 36, 213, 112, 224, 214, 129, 2, 63, 130, 193, 81, 229, 40, 52, 2,
                    58, 225, 236, 212, 14, 142, 99, 175, 57, 28, 110, 245, 236, 57, 9, 145, 206,
                    30, 162, 190, 118, 134, 91, 33, 55, 90, 151, 30, 129,
                ],
                [
                    32, 189, 154, 175, 51, 128, 172, 241, 119, 136, 92, 181, 254, 58, 97, 33, 105,
                    14, 44, 26, 80, 150, 212, 51, 150, 138, 187, 27, 208, 180, 197, 77, 2, 149, 73,
                    159, 210, 110, 206, 197, 0, 83, 146, 90, 152, 37, 137, 96, 80, 171, 115, 189,
                    84, 19, 144, 90, 22, 105, 59, 168, 30, 54, 41, 118,
                ],
                [
                    0, 215, 173, 26, 215, 70, 82, 126, 162, 17, 54, 67, 89, 146, 63, 185, 62, 70,
                    159, 190, 6, 29, 16, 91, 181, 80, 163, 158, 108, 8, 189, 214, 27, 193, 201, 91,
                    225, 139, 187, 149, 62, 232, 60, 187, 225, 111, 179, 130, 67, 80, 236, 242,
                    165, 206, 156, 216, 182, 245, 140, 3, 36, 228, 221, 17,
                ],
                [
                    9, 68, 104, 238, 148, 213, 213, 196, 241, 202, 72, 188, 70, 153, 222, 157, 72,
                    121, 78, 85, 166, 161, 212, 63, 107, 251, 143, 136, 245, 253, 26, 215, 12, 72,
                    42, 133, 145, 141, 106, 250, 142, 194, 236, 200, 27, 100, 100, 67, 249, 112,
                    158, 228, 114, 67, 72, 130, 43, 74, 194, 83, 205, 7, 76, 52,
                ],
                [
                    26, 110, 207, 116, 21, 245, 134, 70, 44, 167, 27, 227, 212, 27, 50, 205, 210,
                    202, 223, 227, 202, 125, 105, 248, 190, 89, 76, 230, 235, 73, 255, 151, 21, 35,
                    108, 201, 130, 110, 20, 74, 6, 138, 41, 59, 180, 30, 72, 238, 24, 231, 224,
                    184, 248, 215, 18, 130, 196, 21, 143, 214, 106, 20, 79, 246,
                ],
                [
                    8, 233, 227, 62, 66, 23, 147, 230, 63, 209, 179, 158, 129, 237, 129, 50, 170,
                    207, 200, 15, 162, 200, 39, 241, 162, 58, 255, 157, 111, 101, 114, 242, 47,
                    205, 80, 237, 198, 219, 46, 243, 98, 239, 183, 94, 111, 165, 111, 203, 170,
                    127, 11, 164, 19, 203, 81, 231, 170, 19, 156, 70, 31, 60, 165, 72,
                ],
                [
                    0, 216, 62, 18, 60, 51, 244, 239, 8, 218, 103, 14, 226, 24, 95, 193, 184, 122,
                    226, 235, 37, 242, 235, 46, 226, 104, 126, 232, 58, 220, 73, 37, 27, 92, 65,
                    183, 183, 211, 232, 21, 250, 192, 210, 119, 244, 37, 90, 179, 124, 141, 186,
                    231, 101, 91, 237, 179, 91, 225, 120, 177, 156, 90, 46, 80,
                ],
                [
                    42, 45, 155, 123, 60, 127, 178, 170, 78, 79, 56, 118, 68, 208, 253, 168, 97,
                    90, 45, 163, 87, 58, 230, 146, 212, 72, 217, 146, 245, 53, 225, 231, 40, 123,
                    226, 53, 140, 38, 184, 28, 61, 143, 228, 251, 22, 71, 242, 255, 187, 220, 186,
                    143, 203, 176, 157, 31, 168, 194, 31, 239, 134, 243, 14, 109,
                ],
                [
                    16, 240, 133, 96, 210, 67, 248, 87, 111, 65, 21, 28, 87, 36, 146, 104, 149,
                    217, 236, 56, 33, 77, 171, 191, 87, 171, 18, 128, 36, 32, 136, 23, 14, 56, 65,
                    199, 97, 121, 168, 182, 98, 172, 136, 251, 234, 242, 166, 26, 174, 93, 164, 24,
                    153, 96, 134, 57, 66, 248, 168, 58, 114, 116, 50, 59,
                ],
                [
                    0, 156, 252, 230, 164, 54, 170, 9, 132, 70, 82, 225, 179, 134, 213, 33, 234,
                    62, 78, 41, 223, 130, 121, 119, 140, 230, 62, 238, 65, 90, 173, 194, 45, 22,
                    25, 231, 149, 106, 32, 175, 52, 48, 41, 3, 29, 171, 185, 53, 187, 72, 91, 251,
                    237, 148, 59, 212, 94, 20, 24, 207, 198, 255, 62, 242,
                ],
                [
                    20, 163, 53, 169, 178, 197, 144, 66, 187, 203, 122, 33, 85, 114, 30, 40, 87,
                    83, 190, 159, 237, 1, 113, 180, 188, 30, 198, 103, 90, 244, 22, 134, 7, 186,
                    122, 211, 26, 251, 156, 219, 68, 76, 64, 36, 100, 252, 203, 156, 231, 200, 135,
                    227, 46, 90, 158, 18, 27, 206, 246, 226, 101, 141, 56, 74,
                ],
                [
                    0, 33, 191, 17, 24, 6, 102, 109, 197, 160, 129, 18, 170, 97, 159, 219, 35, 116,
                    163, 21, 39, 229, 113, 83, 75, 32, 52, 255, 191, 242, 54, 236, 4, 102, 137, 92,
                    61, 40, 243, 50, 176, 50, 6, 166, 91, 88, 144, 84, 227, 46, 245, 186, 17, 110,
                    182, 20, 19, 184, 167, 178, 159, 106, 120, 47,
                ],
                [
                    46, 217, 210, 119, 144, 91, 141, 255, 10, 102, 51, 120, 7, 1, 16, 31, 128, 100,
                    232, 62, 49, 156, 198, 137, 216, 93, 201, 145, 165, 10, 37, 226, 21, 117, 253,
                    141, 28, 192, 212, 14, 148, 168, 106, 8, 166, 103, 110, 59, 60, 111, 34, 155,
                    102, 141, 237, 100, 207, 177, 27, 243, 84, 132, 243, 6,
                ],
                [
                    22, 72, 84, 121, 177, 120, 208, 167, 37, 233, 54, 188, 198, 218, 240, 24, 251,
                    183, 202, 103, 149, 169, 165, 240, 136, 7, 194, 63, 225, 253, 70, 58, 24, 2,
                    121, 245, 13, 8, 171, 15, 101, 80, 218, 98, 80, 165, 240, 78, 128, 200, 26, 16,
                    129, 109, 146, 5, 32, 210, 18, 98, 56, 22, 27, 66,
                ],
                [
                    21, 142, 186, 18, 80, 121, 25, 97, 126, 50, 162, 202, 171, 118, 0, 76, 203,
                    110, 208, 35, 197, 159, 146, 213, 153, 198, 172, 197, 75, 1, 176, 139, 27, 252,
                    205, 40, 11, 92, 240, 49, 15, 209, 114, 93, 56, 183, 51, 106, 213, 44, 158,
                    122, 177, 164, 84, 145, 39, 92, 54, 228, 74, 160, 187, 7,
                ],
                [
                    42, 8, 27, 233, 61, 233, 2, 113, 25, 251, 231, 31, 221, 21, 39, 204, 111, 215,
                    77, 203, 148, 57, 48, 137, 87, 167, 94, 78, 30, 70, 36, 172, 20, 14, 26, 21,
                    50, 117, 165, 106, 222, 216, 241, 140, 255, 26, 186, 182, 141, 231, 127, 28, 2,
                    228, 103, 179, 94, 18, 146, 11, 150, 25, 95, 96,
                ],
            ],
        };

        let proof = Proof {
            a: proof[..64].try_into().unwrap(),
            b: proof[64..192].try_into().unwrap(),
            c: proof[192..256].try_into().unwrap(),
        };

        let (vk, _, _) = test_data();
        let verifier = Groth16Verifier::new(&proof2, signals, &vk2).unwrap();

        assert!(verifier.verify().unwrap());
    }

    fn test_data<'a>() -> (VK, &'a [[u8; 32]], [u8; 256]) {
        (
            VK {
                alpha: [
                    45, 77, 154, 167, 227, 2, 217, 223, 65, 116, 157, 85, 7, 148, 157, 5, 219, 234,
                    51, 251, 177, 108, 100, 59, 34, 245, 153, 162, 190, 109, 242, 226, 20, 190,
                    221, 80, 60, 55, 206, 176, 97, 216, 236, 96, 32, 159, 227, 69, 206, 137, 131,
                    10, 25, 35, 3, 1, 240, 118, 202, 255, 0, 77, 25, 38,
                ],
                beta: [
                    9, 103, 3, 47, 203, 247, 118, 209, 175, 201, 133, 248, 136, 119, 241, 130, 211,
                    132, 128, 166, 83, 242, 222, 202, 169, 121, 76, 188, 59, 243, 6, 12, 14, 24,
                    120, 71, 173, 76, 121, 131, 116, 208, 214, 115, 43, 245, 1, 132, 125, 214, 139,
                    192, 224, 113, 36, 30, 2, 19, 188, 127, 193, 61, 183, 171, 48, 76, 251, 209,
                    224, 138, 112, 74, 153, 245, 232, 71, 217, 63, 140, 60, 170, 253, 222, 196,
                    107, 122, 13, 55, 157, 166, 154, 77, 17, 35, 70, 167, 23, 57, 193, 177, 164,
                    87, 168, 199, 49, 49, 35, 210, 77, 47, 145, 146, 248, 150, 183, 198, 62, 234,
                    5, 169, 213, 127, 6, 84, 122, 208, 206, 200,
                ],
                gamma: [
                    25, 142, 147, 147, 146, 13, 72, 58, 114, 96, 191, 183, 49, 251, 93, 37, 241,
                    170, 73, 51, 53, 169, 231, 18, 151, 228, 133, 183, 174, 243, 18, 194, 24, 0,
                    222, 239, 18, 31, 30, 118, 66, 106, 0, 102, 94, 92, 68, 121, 103, 67, 34, 212,
                    247, 94, 218, 221, 70, 222, 189, 92, 217, 146, 246, 237, 9, 6, 137, 208, 88,
                    95, 240, 117, 236, 158, 153, 173, 105, 12, 51, 149, 188, 75, 49, 51, 112, 179,
                    142, 243, 85, 172, 218, 220, 209, 34, 151, 91, 18, 200, 94, 165, 219, 140, 109,
                    235, 74, 171, 113, 128, 141, 203, 64, 143, 227, 209, 231, 105, 12, 67, 211,
                    123, 76, 230, 204, 1, 102, 250, 125, 170,
                ],
                delta: [
                    25, 142, 147, 147, 146, 13, 72, 58, 114, 96, 191, 183, 49, 251, 93, 37, 241,
                    170, 73, 51, 53, 169, 231, 18, 151, 228, 133, 183, 174, 243, 18, 194, 24, 0,
                    222, 239, 18, 31, 30, 118, 66, 106, 0, 102, 94, 92, 68, 121, 103, 67, 34, 212,
                    247, 94, 218, 221, 70, 222, 189, 92, 217, 146, 246, 237, 9, 6, 137, 208, 88,
                    95, 240, 117, 236, 158, 153, 173, 105, 12, 51, 149, 188, 75, 49, 51, 112, 179,
                    142, 243, 85, 172, 218, 220, 209, 34, 151, 91, 18, 200, 94, 165, 219, 140, 109,
                    235, 74, 171, 113, 128, 141, 203, 64, 143, 227, 209, 231, 105, 12, 67, 211,
                    123, 76, 230, 204, 1, 102, 250, 125, 170,
                ],
                ic: vec![
                    [
                        2, 11, 194, 97, 0, 60, 149, 138, 51, 98, 201, 46, 23, 237, 7, 220, 255,
                        190, 37, 208, 120, 93, 216, 202, 145, 138, 10, 186, 49, 135, 146, 62, 7,
                        104, 179, 102, 243, 236, 202, 249, 241, 189, 217, 25, 143, 205, 208, 99,
                        108, 109, 26, 248, 34, 149, 121, 66, 127, 117, 1, 131, 181, 70, 167, 235,
                    ],
                    [
                        42, 138, 33, 105, 229, 220, 185, 47, 201, 103, 105, 249, 107, 56, 26, 171,
                        39, 247, 165, 84, 36, 213, 112, 224, 214, 129, 2, 63, 130, 193, 81, 229,
                        40, 52, 2, 58, 225, 236, 212, 14, 142, 99, 175, 57, 28, 110, 245, 236, 57,
                        9, 145, 206, 30, 162, 190, 118, 134, 91, 33, 55, 90, 151, 30, 129,
                    ],
                    [
                        32, 189, 154, 175, 51, 128, 172, 241, 119, 136, 92, 181, 254, 58, 97, 33,
                        105, 14, 44, 26, 80, 150, 212, 51, 150, 138, 187, 27, 208, 180, 197, 77, 2,
                        149, 73, 159, 210, 110, 206, 197, 0, 83, 146, 90, 152, 37, 137, 96, 80,
                        171, 115, 189, 84, 19, 144, 90, 22, 105, 59, 168, 30, 54, 41, 118,
                    ],
                    [
                        0, 215, 173, 26, 215, 70, 82, 126, 162, 17, 54, 67, 89, 146, 63, 185, 62,
                        70, 159, 190, 6, 29, 16, 91, 181, 80, 163, 158, 108, 8, 189, 214, 27, 193,
                        201, 91, 225, 139, 187, 149, 62, 232, 60, 187, 225, 111, 179, 130, 67, 80,
                        236, 242, 165, 206, 156, 216, 182, 245, 140, 3, 36, 228, 221, 17,
                    ],
                    [
                        9, 68, 104, 238, 148, 213, 213, 196, 241, 202, 72, 188, 70, 153, 222, 157,
                        72, 121, 78, 85, 166, 161, 212, 63, 107, 251, 143, 136, 245, 253, 26, 215,
                        12, 72, 42, 133, 145, 141, 106, 250, 142, 194, 236, 200, 27, 100, 100, 67,
                        249, 112, 158, 228, 114, 67, 72, 130, 43, 74, 194, 83, 205, 7, 76, 52,
                    ],
                    [
                        26, 110, 207, 116, 21, 245, 134, 70, 44, 167, 27, 227, 212, 27, 50, 205,
                        210, 202, 223, 227, 202, 125, 105, 248, 190, 89, 76, 230, 235, 73, 255,
                        151, 21, 35, 108, 201, 130, 110, 20, 74, 6, 138, 41, 59, 180, 30, 72, 238,
                        24, 231, 224, 184, 248, 215, 18, 130, 196, 21, 143, 214, 106, 20, 79, 246,
                    ],
                    [
                        8, 233, 227, 62, 66, 23, 147, 230, 63, 209, 179, 158, 129, 237, 129, 50,
                        170, 207, 200, 15, 162, 200, 39, 241, 162, 58, 255, 157, 111, 101, 114,
                        242, 47, 205, 80, 237, 198, 219, 46, 243, 98, 239, 183, 94, 111, 165, 111,
                        203, 170, 127, 11, 164, 19, 203, 81, 231, 170, 19, 156, 70, 31, 60, 165,
                        72,
                    ],
                    [
                        0, 216, 62, 18, 60, 51, 244, 239, 8, 218, 103, 14, 226, 24, 95, 193, 184,
                        122, 226, 235, 37, 242, 235, 46, 226, 104, 126, 232, 58, 220, 73, 37, 27,
                        92, 65, 183, 183, 211, 232, 21, 250, 192, 210, 119, 244, 37, 90, 179, 124,
                        141, 186, 231, 101, 91, 237, 179, 91, 225, 120, 177, 156, 90, 46, 80,
                    ],
                    [
                        42, 45, 155, 123, 60, 127, 178, 170, 78, 79, 56, 118, 68, 208, 253, 168,
                        97, 90, 45, 163, 87, 58, 230, 146, 212, 72, 217, 146, 245, 53, 225, 231,
                        40, 123, 226, 53, 140, 38, 184, 28, 61, 143, 228, 251, 22, 71, 242, 255,
                        187, 220, 186, 143, 203, 176, 157, 31, 168, 194, 31, 239, 134, 243, 14,
                        109,
                    ],
                    [
                        16, 240, 133, 96, 210, 67, 248, 87, 111, 65, 21, 28, 87, 36, 146, 104, 149,
                        217, 236, 56, 33, 77, 171, 191, 87, 171, 18, 128, 36, 32, 136, 23, 14, 56,
                        65, 199, 97, 121, 168, 182, 98, 172, 136, 251, 234, 242, 166, 26, 174, 93,
                        164, 24, 153, 96, 134, 57, 66, 248, 168, 58, 114, 116, 50, 59,
                    ],
                    [
                        0, 156, 252, 230, 164, 54, 170, 9, 132, 70, 82, 225, 179, 134, 213, 33,
                        234, 62, 78, 41, 223, 130, 121, 119, 140, 230, 62, 238, 65, 90, 173, 194,
                        45, 22, 25, 231, 149, 106, 32, 175, 52, 48, 41, 3, 29, 171, 185, 53, 187,
                        72, 91, 251, 237, 148, 59, 212, 94, 20, 24, 207, 198, 255, 62, 242,
                    ],
                    [
                        20, 163, 53, 169, 178, 197, 144, 66, 187, 203, 122, 33, 85, 114, 30, 40,
                        87, 83, 190, 159, 237, 1, 113, 180, 188, 30, 198, 103, 90, 244, 22, 134, 7,
                        186, 122, 211, 26, 251, 156, 219, 68, 76, 64, 36, 100, 252, 203, 156, 231,
                        200, 135, 227, 46, 90, 158, 18, 27, 206, 246, 226, 101, 141, 56, 74,
                    ],
                    [
                        0, 33, 191, 17, 24, 6, 102, 109, 197, 160, 129, 18, 170, 97, 159, 219, 35,
                        116, 163, 21, 39, 229, 113, 83, 75, 32, 52, 255, 191, 242, 54, 236, 4, 102,
                        137, 92, 61, 40, 243, 50, 176, 50, 6, 166, 91, 88, 144, 84, 227, 46, 245,
                        186, 17, 110, 182, 20, 19, 184, 167, 178, 159, 106, 120, 47,
                    ],
                    [
                        46, 217, 210, 119, 144, 91, 141, 255, 10, 102, 51, 120, 7, 1, 16, 31, 128,
                        100, 232, 62, 49, 156, 198, 137, 216, 93, 201, 145, 165, 10, 37, 226, 21,
                        117, 253, 141, 28, 192, 212, 14, 148, 168, 106, 8, 166, 103, 110, 59, 60,
                        111, 34, 155, 102, 141, 237, 100, 207, 177, 27, 243, 84, 132, 243, 6,
                    ],
                    [
                        22, 72, 84, 121, 177, 120, 208, 167, 37, 233, 54, 188, 198, 218, 240, 24,
                        251, 183, 202, 103, 149, 169, 165, 240, 136, 7, 194, 63, 225, 253, 70, 58,
                        24, 2, 121, 245, 13, 8, 171, 15, 101, 80, 218, 98, 80, 165, 240, 78, 128,
                        200, 26, 16, 129, 109, 146, 5, 32, 210, 18, 98, 56, 22, 27, 66,
                    ],
                    [
                        21, 142, 186, 18, 80, 121, 25, 97, 126, 50, 162, 202, 171, 118, 0, 76, 203,
                        110, 208, 35, 197, 159, 146, 213, 153, 198, 172, 197, 75, 1, 176, 139, 27,
                        252, 205, 40, 11, 92, 240, 49, 15, 209, 114, 93, 56, 183, 51, 106, 213, 44,
                        158, 122, 177, 164, 84, 145, 39, 92, 54, 228, 74, 160, 187, 7,
                    ],
                    [
                        42, 8, 27, 233, 61, 233, 2, 113, 25, 251, 231, 31, 221, 21, 39, 204, 111,
                        215, 77, 203, 148, 57, 48, 137, 87, 167, 94, 78, 30, 70, 36, 172, 20, 14,
                        26, 21, 50, 117, 165, 106, 222, 216, 241, 140, 255, 26, 186, 182, 141, 231,
                        127, 28, 2, 228, 103, 179, 94, 18, 146, 11, 150, 25, 95, 96,
                    ],
                ],
            },
            &[
                [
                    0, 199, 214, 240, 123, 172, 248, 120, 228, 226, 80, 170, 126, 30, 175, 137,
                    146, 226, 184, 21, 10, 234, 158, 225, 179, 97, 99, 42, 178, 165, 78, 197,
                ],
                [
                    1, 24, 137, 177, 30, 45, 57, 167, 210, 172, 227, 148, 76, 91, 156, 16, 58, 67,
                    90, 245, 67, 148, 118, 22, 242, 95, 231, 130, 15, 199, 245, 218,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 1, 52, 178, 73,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 18,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 100,
                ],
                [
                    24, 125, 217, 174, 133, 40, 203, 118, 245, 106, 154, 122, 19, 50, 71, 225, 18,
                    147, 174, 184, 246, 177, 138, 220, 37, 203, 36, 131, 167, 224, 109, 31,
                ],
                [
                    46, 19, 226, 114, 3, 228, 121, 0, 203, 132, 50, 204, 165, 145, 251, 3, 242,
                    141, 38, 88, 124, 50, 248, 61, 218, 182, 181, 189, 88, 230, 143, 215,
                ],
                [
                    45, 183, 198, 89, 118, 191, 150, 159, 106, 184, 128, 72, 245, 119, 147, 210,
                    107, 183, 226, 219, 241, 216, 158, 67, 9, 92, 26, 98, 61, 107, 160, 254,
                ],
                [
                    46, 196, 175, 216, 123, 42, 24, 178, 16, 98, 164, 254, 143, 46, 79, 106, 229,
                    141, 49, 13, 188, 75, 245, 196, 75, 161, 118, 58, 149, 60, 215, 188,
                ],
                [
                    34, 59, 233, 132, 237, 149, 239, 141, 62, 114, 113, 160, 135, 11, 50, 26, 18,
                    8, 164, 169, 71, 229, 111, 227, 32, 231, 29, 61, 112, 192, 93, 138,
                ],
                [
                    3, 173, 23, 227, 2, 43, 181, 73, 139, 193, 142, 183, 238, 255, 98, 64, 170,
                    184, 200, 150, 126, 198, 90, 126, 220, 16, 104, 57, 239, 125, 189, 100,
                ],
            ],
            [
                5, 101, 108, 215, 95, 81, 154, 39, 21, 149, 37, 220, 29, 110, 108, 225, 74, 80,
                206, 248, 153, 169, 156, 103, 215, 189, 107, 240, 64, 92, 103, 104, 35, 254, 183,
                88, 216, 79, 64, 248, 151, 44, 152, 0, 86, 50, 240, 72, 166, 9, 243, 19, 95, 156,
                77, 158, 37, 167, 95, 41, 28, 87, 12, 110, 29, 83, 193, 199, 149, 132, 191, 88, 28,
                6, 129, 242, 28, 44, 254, 248, 125, 81, 221, 2, 64, 110, 194, 51, 50, 56, 165, 84,
                220, 167, 31, 152, 42, 20, 99, 144, 33, 61, 79, 127, 16, 178, 118, 212, 204, 185,
                241, 216, 46, 50, 214, 183, 41, 126, 108, 153, 136, 134, 60, 12, 103, 163, 80, 195,
                35, 16, 37, 107, 139, 152, 232, 69, 65, 161, 127, 223, 239, 196, 239, 210, 147,
                142, 45, 231, 155, 230, 36, 212, 167, 186, 162, 86, 83, 76, 128, 147, 43, 148, 46,
                134, 195, 183, 125, 160, 61, 88, 168, 69, 5, 218, 119, 31, 125, 168, 147, 138, 94,
                247, 142, 22, 221, 254, 74, 146, 55, 246, 255, 255, 29, 53, 108, 157, 139, 113, 45,
                49, 168, 63, 144, 90, 126, 56, 74, 105, 14, 22, 203, 36, 245, 12, 156, 126, 63,
                187, 97, 224, 47, 129, 46, 222, 25, 195, 36, 72, 38, 193, 178, 243, 4, 141, 153,
                218, 149, 157, 138, 80, 85, 14, 141, 179, 28, 2, 156, 86, 144, 103, 117, 237, 132,
                156, 231, 65,
            ],
        )
    }
}
