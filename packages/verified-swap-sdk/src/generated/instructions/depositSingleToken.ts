/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category DepositSingleToken
 * @category generated
 */
export type DepositSingleTokenInstructionArgs = {
  sourceTokenAmount: beet.bignum
  minimumPoolTokenAmount: beet.bignum
}
/**
 * @category Instructions
 * @category DepositSingleToken
 * @category generated
 */
export const depositSingleTokenStruct = new beet.BeetArgsStruct<
  DepositSingleTokenInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['sourceTokenAmount', beet.u64],
    ['minimumPoolTokenAmount', beet.u64],
  ],
  'DepositSingleTokenInstructionArgs'
)
/**
 * Accounts required by the _depositSingleToken_ instruction
 *
 * @property [] swap
 * @property [] authority
 * @property [**signer**] userTransferAuthority
 * @property [_writable_] sourceToken
 * @property [_writable_] swapTokenA
 * @property [_writable_] swapTokenB
 * @property [_writable_] poolMint
 * @property [_writable_] destination
 * @property [] splTokenSwapProgram
 * @property [] proofRequest
 * @category Instructions
 * @category DepositSingleToken
 * @category generated
 */
export type DepositSingleTokenInstructionAccounts = {
  swap: web3.PublicKey
  authority: web3.PublicKey
  userTransferAuthority: web3.PublicKey
  sourceToken: web3.PublicKey
  swapTokenA: web3.PublicKey
  swapTokenB: web3.PublicKey
  poolMint: web3.PublicKey
  destination: web3.PublicKey
  splTokenSwapProgram: web3.PublicKey
  proofRequest: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const depositSingleTokenInstructionDiscriminator = [
  166, 136, 166, 47, 199, 192, 86, 169,
]

/**
 * Creates a _DepositSingleToken_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DepositSingleToken
 * @category generated
 */
export function createDepositSingleTokenInstruction(
  accounts: DepositSingleTokenInstructionAccounts,
  args: DepositSingleTokenInstructionArgs,
  programId = new web3.PublicKey('8NHcjkbgyuZzcwryaGJ9zf7JRqKfsHipuNDQdhtk9giR')
) {
  const [data] = depositSingleTokenStruct.serialize({
    instructionDiscriminator: depositSingleTokenInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.swap,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.userTransferAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.sourceToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.swapTokenA,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.swapTokenB,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.poolMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.destination,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.splTokenSwapProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proofRequest,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
