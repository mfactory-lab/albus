/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import {
  CredentialRequestStatus,
  credentialRequestStatusBeet,
} from '../types/CredentialRequestStatus'

/**
 * Arguments used to create {@link CredentialRequest}
 * @category Accounts
 * @category generated
 */
export type CredentialRequestArgs = {
  credentialSpec: web3.PublicKey
  credentialMint: web3.PublicKey
  owner: web3.PublicKey
  issuer: web3.PublicKey
  status: CredentialRequestStatus
  createdAt: beet.bignum
  bump: number
  uri: string
  message: string
}

export const credentialRequestDiscriminator = [
  13, 77, 28, 51, 251, 145, 231, 29,
]
/**
 * Holds the data for the {@link CredentialRequest} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class CredentialRequest implements CredentialRequestArgs {
  private constructor(
    readonly credentialSpec: web3.PublicKey,
    readonly credentialMint: web3.PublicKey,
    readonly owner: web3.PublicKey,
    readonly issuer: web3.PublicKey,
    readonly status: CredentialRequestStatus,
    readonly createdAt: beet.bignum,
    readonly bump: number,
    readonly uri: string,
    readonly message: string,
  ) {}

  /**
   * Creates a {@link CredentialRequest} instance from the provided args.
   */
  static fromArgs(args: CredentialRequestArgs) {
    return new CredentialRequest(
      args.credentialSpec,
      args.credentialMint,
      args.owner,
      args.issuer,
      args.status,
      args.createdAt,
      args.bump,
      args.uri,
      args.message,
    )
  }

  /**
   * Deserializes the {@link CredentialRequest} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [CredentialRequest, number] {
    return CredentialRequest.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link CredentialRequest} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<CredentialRequest> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find CredentialRequest account at ${address}`)
    }
    return CredentialRequest.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'ALBUSbdydS2qoQXXeFfr4mqc9LFw5xWmUMdB4tcscHhi',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, credentialRequestBeet)
  }

  /**
   * Deserializes the {@link CredentialRequest} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [CredentialRequest, number] {
    return credentialRequestBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link CredentialRequest} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return credentialRequestBeet.serialize({
      accountDiscriminator: credentialRequestDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link CredentialRequest} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: CredentialRequestArgs) {
    const instance = CredentialRequest.fromArgs(args)
    return credentialRequestBeet.toFixedFromValue({
      accountDiscriminator: credentialRequestDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link CredentialRequest} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: CredentialRequestArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      CredentialRequest.byteSize(args),
      commitment,
    )
  }

  /**
   * Returns a readable version of {@link CredentialRequest} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      credentialSpec: this.credentialSpec.toBase58(),
      credentialMint: this.credentialMint.toBase58(),
      owner: this.owner.toBase58(),
      issuer: this.issuer.toBase58(),
      status: `CredentialRequestStatus.${CredentialRequestStatus[this.status]}`,
      createdAt: (() => {
        const x = <{ toNumber: () => number }> this.createdAt
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      bump: this.bump,
      uri: this.uri,
      message: this.message,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const credentialRequestBeet = new beet.FixableBeetStruct<
  CredentialRequest,
  CredentialRequestArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['credentialSpec', beetSolana.publicKey],
    ['credentialMint', beetSolana.publicKey],
    ['owner', beetSolana.publicKey],
    ['issuer', beetSolana.publicKey],
    ['status', credentialRequestStatusBeet],
    ['createdAt', beet.i64],
    ['bump', beet.u8],
    ['uri', beet.utf8String],
    ['message', beet.utf8String],
  ],
  CredentialRequest.fromArgs,
  'CredentialRequest',
)
