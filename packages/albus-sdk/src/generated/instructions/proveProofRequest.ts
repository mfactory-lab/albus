/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import type {
  ProveProofRequestData } from '../types/ProveProofRequestData'
import {
  proveProofRequestDataBeet,
} from '../types/ProveProofRequestData'

/**
 * @category Instructions
 * @category ProveProofRequest
 * @category generated
 */
export type ProveProofRequestInstructionArgs = {
  data: ProveProofRequestData
}
/**
 * @category Instructions
 * @category ProveProofRequest
 * @category generated
 */
export const proveProofRequestStruct = new beet.FixableBeetArgsStruct<
  ProveProofRequestInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['data', proveProofRequestDataBeet],
  ],
  'ProveProofRequestInstructionArgs',
)
/**
 * Accounts required by the _proveProofRequest_ instruction
 *
 * @property [_writable_] proofRequest
 * @property [] circuit
 * @property [] policy
 * @property [] issuer (optional)
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category ProveProofRequest
 * @category generated
 */
export type ProveProofRequestInstructionAccounts = {
  proofRequest: web3.PublicKey
  circuit: web3.PublicKey
  policy: web3.PublicKey
  issuer?: web3.PublicKey
  authority: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const proveProofRequestInstructionDiscriminator = [
  148, 131, 112, 65, 14, 251, 112, 208,
]

/**
 * Creates a _ProveProofRequest_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ProveProofRequest
 * @category generated
 */
export function createProveProofRequestInstruction(
  accounts: ProveProofRequestInstructionAccounts,
  args: ProveProofRequestInstructionArgs,
  programId = new web3.PublicKey('ALBs64hsiHgdg53mvd4bcvNZLfDRhctSVaP7PwAPpsZL'),
) {
  const [data] = proveProofRequestStruct.serialize({
    instructionDiscriminator: proveProofRequestInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.proofRequest,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.circuit,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.policy,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.issuer ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
