/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import type {
  RequestCredentialData } from '../types/RequestCredentialData'
import {
  requestCredentialDataBeet,
} from '../types/RequestCredentialData'

/**
 * @category Instructions
 * @category RequestCredential
 * @category generated
 */
export type RequestCredentialInstructionArgs = {
  data: RequestCredentialData
}
/**
 * @category Instructions
 * @category RequestCredential
 * @category generated
 */
export const requestCredentialStruct = new beet.FixableBeetArgsStruct<
  RequestCredentialInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['data', requestCredentialDataBeet],
  ],
  'RequestCredentialInstructionArgs',
)
/**
 * Accounts required by the _requestCredential_ instruction
 *
 * @property [_writable_] credentialRequest
 * @property [_writable_] credentialSpec
 * @property [] credentialMint
 * @property [_writable_] credentialMetadata
 * @property [] credentialToken
 * @property [**signer**] credentialOwner
 * @property [] issuer
 * @property [_writable_, **signer**] authority
 * @property [_writable_] albusAuthority
 * @property [] sysvarInstructions
 * @property [] metadataProgram
 * @category Instructions
 * @category RequestCredential
 * @category generated
 */
export type RequestCredentialInstructionAccounts = {
  credentialRequest: web3.PublicKey
  credentialSpec: web3.PublicKey
  credentialMint: web3.PublicKey
  credentialMetadata: web3.PublicKey
  credentialToken: web3.PublicKey
  credentialOwner: web3.PublicKey
  issuer: web3.PublicKey
  authority: web3.PublicKey
  albusAuthority: web3.PublicKey
  sysvarInstructions: web3.PublicKey
  metadataProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const requestCredentialInstructionDiscriminator = [
  250, 55, 225, 61, 98, 70, 116, 139,
]

/**
 * Creates a _RequestCredential_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RequestCredential
 * @category generated
 */
export function createRequestCredentialInstruction(
  accounts: RequestCredentialInstructionAccounts,
  args: RequestCredentialInstructionArgs,
  programId = new web3.PublicKey('ALBUSbdydS2qoQXXeFfr4mqc9LFw5xWmUMdB4tcscHhi'),
) {
  const [data] = requestCredentialStruct.serialize({
    instructionDiscriminator: requestCredentialInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.credentialRequest,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.credentialSpec,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.credentialMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.credentialMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.credentialToken,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.credentialOwner,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.issuer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.albusAuthority,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.sysvarInstructions,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.metadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
