/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Delegate
 * @category generated
 */
export const delegateStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'DelegateInstructionArgs',
)
/**
 * Accounts required by the _delegate_ instruction
 *
 * @property [_writable_] stake
 * @property [] vote
 * @property [**signer**] authorized
 * @property [] zkpRequest
 * @property [] stakeProgram
 * @property [] clock
 * @property [] stakeHistory
 * @property [] stakeConfig
 * @category Instructions
 * @category Delegate
 * @category generated
 */
export type DelegateInstructionAccounts = {
  stake: web3.PublicKey
  vote: web3.PublicKey
  authorized: web3.PublicKey
  zkpRequest: web3.PublicKey
  stakeProgram: web3.PublicKey
  clock: web3.PublicKey
  stakeHistory: web3.PublicKey
  stakeConfig: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const delegateInstructionDiscriminator = [
  90,
  147,
  75,
  178,
  85,
  88,
  4,
  137,
]

/**
 * Creates a _Delegate_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Delegate
 * @category generated
 */
export function createDelegateInstruction(
  accounts: DelegateInstructionAccounts,
  programId = new web3.PublicKey('CMev81L3acPrcTTevCFGdcNQnDypMGzuiAUgo8NBZJzr'),
) {
  const [data] = delegateStruct.serialize({
    instructionDiscriminator: delegateInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.stake,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vote,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authorized,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.zkpRequest,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeHistory,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeConfig,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
