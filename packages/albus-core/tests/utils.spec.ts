/*
 * This file is part of Albus code.
 *
 * Copyright (c) 2023, mFactory GmbH
 *
 * Albus is free software: you can redistribute it
 * and/or modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * Albus is distributed in the hope that it
 * will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.
 * If not, see <https://www.gnu.org/licenses/agpl-3.0.html>.
 *
 * You can be released from the requirements of the Affero GNU General Public License
 * by purchasing a commercial license. The purchase of such a license is
 * mandatory as soon as you develop commercial activities using the
 * Albus code without disclosing the source code of
 * your own applications.
 *
 * The developer of this program can be contacted at <info@albus.finance>.
 */

import { assert, describe, it } from 'vitest'
import {
  altBn128G1Neg,
  bytesToFinite,
  decodeG1,
  decodeProof,
  decodePublicSignals,
  decodeVerifyingKey,
  encodeG1,
  encodeProof,
  encodePublicSignals,
  encodeVerifyingKey,
  finiteToBytes,
} from '../src/zkp'
import { bytesToHex, hexToBytes, hexToString } from '../src/crypto/utils'

describe('utils', () => {
  it('hex', async () => {
    const string = 'Hello world!'
    const bytes = new TextEncoder().encode(string)
    const hex = bytesToHex(bytes)

    assert.deepEqual(hexToBytes(hex), bytes)
    assert.deepEqual(hexToString(hex), string)
  })

  it('altBn128G1Neg', async () => {
    const g1 = encodeG1([
      2013390181102474934237225984904052601084975840579903307271824986534913896045n,
      4558797724519420279226569456496440112057206950163580132097987045500495063086n,
      1n,
    ])
    assert.deepEqual(decodeG1(altBn128G1Neg(g1)), [
      2013390181102474934237225984904052601084975840579903307271824986534913896045n,
      17329445147319854943019836288760834976639104207134243530591050849144731145497n,
      1n,
    ])
  })

  it('test finite helpers', async () => {
    const n = '1662767948258934355069791443487100820038153707701411290986741440889424297316'
    const bytes = finiteToBytes(n)
    assert.equal(n, bytesToFinite(bytes).toString())
  })

  it('test encode/decode public signals', async () => {
    const data = [
      8562721436241298825529238118701962356722530870721033656509302281353568863228n,
      2849653999114454375822243538456928062036581703111733441562696872953712217349n,
      20417257909411318974841555445889311596157856608114762453473663100133464215289n,
      19596924644313185255197548798206545525477303251142342583133504941570333597303n,
      7495636880434271714199918573970049834525586797838983136242745051370545824448n,
      4092506707232357786129691158561151205591894019964422831962392058758930016842n,
      8889497523712446284081394294448493482408495175087717752928350424621851142121n,
      7076001407955298447730795682669369071871868592647226006912664565553578437503n,
      6514117391954871306173545875521245363986541482782922450613262206537330882445n,
      19253926231174300543263007185634627847135704605249202681608831455969799394379n,
      13391910054363437295578561654281974594360024784697964836777896930453245684784n,
      12057607769388699663710569270641721272823820364150765392481868635392134485701n,
      8513562691184248322258785779993714179140675987498153484648781129070736624426n,
      16140409637481046961916843704899482470641809764070610558947396269571678949363n,
      20303302764103844319846730891535035904251599610282949082868512590522714219790n,
      20899709818943384233314426615158369949079358453320224781711773766040968424957n,
      20230914n,
      18n,
      100n,
      11077866633106981791340789987944870806147307639065753995447310137530607758623n,
      353086023020879629087888673454917369147465163855843886593149553676241948357n,
      495667492475991330422281750651009254772949868345543114298160384197425362394n,
      0n,
      0n,
      0n,
      0n,
      0n,
      20841523997579262969290434121704327723902935194219264790567899027938554056663n,
      20678780156819015018034618985253893352998041677807437760911245092739191906558n,
      21153906701456715004295579276500758430977318622340395655171725984189489403836n,
      15484492519285437260388749074045005694239822857741052851485555393361224949130n,
      1662767948258934355069791443487100820038153707701411290986741440889424297316n,
      390929767534779066322795308340317527820857688083668540988028607791750407730n,
      6521085393685422445763872310060932739233551744415163984921420639797144208719n,
      7998557093131892248730534521131234937771298560444758367270810343757292146425n,
      18112140804314684515132837478378247230912748396034700645505552973175667963977n,
      3309457631727585702785131712790823496080722602145559114202126991121639908183n,
      12579923505920936850353123918350706329548353142803445486300400275515229272905n,
    ]
    const bytes = encodePublicSignals(data)
    assert.deepEqual(data, decodePublicSignals(bytes))
  })

  it('test encode/decode proof', async () => {
    const data = {
      curve: 'bn128',
      protocol: 'groth16',
      pi_a: [
        10667185560072417343295848004991231607923016352949952314699156450014363541092n,
        3482114703198400216394927300214904484698681832228450474842684948088472877324n,
        1n,
      ],
      pi_b: [
        [
          18607128303711016767962370784486497564719848484947407328144328351833803410725n,
          8371651765113816545385863257753502452702158687226667875021479196316957556620n,
        ],
        [
          14174461402322723865778461015715044381672149681849882832552341259801634935255n,
          9871890875358683831249035228153561417317275653863884260574690301091522709000n,
        ],
        [1n, 0n],
      ],
      pi_c: [
        8210665412500874912913253580514228815954559416221026598319630881292050505613n,
        7603316297684166344676750693231364610845624220247298155168331358260925218869n,
        1n,
      ],
    }
    const bytes = encodeProof(data)
    assert.deepEqual(data, decodeProof(bytes))
  })

  it('test encode/decode VK', async () => {
    const data = {
      protocol: 'groth16',
      curve: 'bn128',
      nPublic: 1,
      vk_alpha_1: [
        20491192805390485299153009773594534940189261866228447918068658471970481763042n,
        9383485363053290200918347156157836566562967994039712273449902621266178545958n,
        1n,
      ],
      vk_beta_2: [
        [
          6375614351688725206403948262868962793625744043794305715222011528459656738731n,
          4252822878758300859123897981450591353533073413197771768651442665752259397132n,
        ],
        [
          10505242626370262277552901082094356697409835680220590971873171140371331206856n,
          21847035105528745403288232691147584728191162732299865338377159692350059136679n,
        ],
        [
          1n,
          0n,
        ],
      ],
      vk_gamma_2: [
        [
          10857046999023057135944570762232829481370756359578518086990519993285655852781n,
          11559732032986387107991004021392285783925812861821192530917403151452391805634n,
        ],
        [
          8495653923123431417604973247489272438418190587263600148770280649306958101930n,
          4082367875863433681332203403145435568316851327593401208105741076214120093531n,
        ],
        [
          1n,
          0n,
        ],
      ],
      vk_delta_2: [
        [
          10857046999023057135944570762232829481370756359578518086990519993285655852781n,
          11559732032986387107991004021392285783925812861821192530917403151452391805634n,
        ],
        [
          8495653923123431417604973247489272438418190587263600148770280649306958101930n,
          4082367875863433681332203403145435568316851327593401208105741076214120093531n,
        ],
        [
          1n,
          0n,
        ],
      ],
      IC: [
        [
          925402568810121956987317348699904710217796559306478237167131375899389694526n,
          3351180223018750063925248525996672725665933163870666127250492017223167027179n,
          1n,
        ],
        [
          19241195148067764614836915881746199779574327641842635166493459093959666127333n,
          18184405381661422952479483946463041138608179456884514815488709490810757258881n,
          1n,
        ],
      ],
    }

    const bytes = encodeVerifyingKey(data)
    assert.deepEqual(data, decodeVerifyingKey(bytes))
  })
})
