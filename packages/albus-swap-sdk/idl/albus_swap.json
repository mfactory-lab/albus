{
  "version": "0.0.6",
  "name": "albus_swap",
  "instructions": [
    {
      "name": "initialize",
      "accounts": [
        {
          "name": "authority",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenSwap",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "Token-swap"
          ]
        },
        {
          "name": "poolMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Pool Token Mint. Must be empty, owned by swap authority."
          ]
        },
        {
          "name": "tokenA",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Token A Account. Must be non-zero, owned by swap authority."
          ]
        },
        {
          "name": "tokenB",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Token B Account. Must be non-zero, owned by swap authority."
          ]
        },
        {
          "name": "poolFee",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Pool Token Account to deposit trading and withdraw fees.",
            "Must be empty, not owned by swap authority."
          ]
        },
        {
          "name": "destination",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Pool Token Account to deposit the initial pool token."
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Pool Token program id."
          ]
        }
      ],
      "args": [
        {
          "name": "feesInput",
          "type": {
            "defined": "FeesInfo"
          }
        },
        {
          "name": "curveInput",
          "type": {
            "defined": "CurveInfo"
          }
        },
        {
          "name": "swapPolicy",
          "type": {
            "option": "publicKey"
          }
        },
        {
          "name": "addLiquidityPolicy",
          "type": {
            "option": "publicKey"
          }
        }
      ]
    },
    {
      "name": "swap",
      "accounts": [
        {
          "name": "proofRequest",
          "isMut": false,
          "isSigner": false,
          "isOptional": true
        },
        {
          "name": "tokenSwap",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Token-swap"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userTransferAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "userSource",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "SOURCE Account, amount is transferable by user transfer authority."
          ]
        },
        {
          "name": "userDestination",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "DESTINATION Account assigned to USER as the owner."
          ]
        },
        {
          "name": "poolSource",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Base Account to swap FROM.  Must be the DESTINATION token."
          ]
        },
        {
          "name": "poolDestination",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Base Account to swap INTO. Must be the SOURCE token."
          ]
        },
        {
          "name": "poolMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Pool token mint, to generate trading fees."
          ]
        },
        {
          "name": "poolFee",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Fee account, to receive trading fees."
          ]
        },
        {
          "name": "hostFeeAccount",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Host fee account to receive additional trading fees."
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Pool Token program id."
          ]
        }
      ],
      "args": [
        {
          "name": "amountIn",
          "type": "u64"
        },
        {
          "name": "minimumAmountOut",
          "type": "u64"
        }
      ]
    },
    {
      "name": "depositAllTokenTypes",
      "accounts": [
        {
          "name": "proofRequest",
          "isMut": false,
          "isSigner": false,
          "isOptional": true
        },
        {
          "name": "tokenSwap",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Token-swap"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userTransferAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "userTokenA",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_a user transfer authority can transfer amount."
          ]
        },
        {
          "name": "userTokenB",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_b user transfer authority can transfer amount."
          ]
        },
        {
          "name": "swapTokenA",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_a Base Account to deposit into."
          ]
        },
        {
          "name": "swapTokenB",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_b Base Account to deposit into."
          ]
        },
        {
          "name": "poolMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Pool MINT account, swap authority is the owner."
          ]
        },
        {
          "name": "destination",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Pool Account to deposit the generated tokens, user is the owner."
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Pool Token program id."
          ]
        }
      ],
      "args": [
        {
          "name": "poolTokenAmount",
          "type": "u64"
        },
        {
          "name": "maximumTokenAAmount",
          "type": "u64"
        },
        {
          "name": "maximumTokenBAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdrawAllTokenTypes",
      "accounts": [
        {
          "name": "tokenSwap",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Token-swap"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userTransferAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "poolMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Pool mint account, swap authority is the owner."
          ]
        },
        {
          "name": "source",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "SOURCE Pool account, amount is transferable by user transfer authority."
          ]
        },
        {
          "name": "swapTokenA",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_a Swap Account to withdraw FROM."
          ]
        },
        {
          "name": "swapTokenB",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_b Swap Account to withdraw FROM."
          ]
        },
        {
          "name": "destTokenA",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_a user Account to credit."
          ]
        },
        {
          "name": "destTokenB",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_b user Account to credit."
          ]
        },
        {
          "name": "poolFee",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Fee account, to receive withdrawal fees."
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Pool Token program id."
          ]
        }
      ],
      "args": [
        {
          "name": "poolTokenAmount",
          "type": "u64"
        },
        {
          "name": "minimumTokenAAmount",
          "type": "u64"
        },
        {
          "name": "minimumTokenBAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "depositSingleTokenType",
      "accounts": [
        {
          "name": "proofRequest",
          "isMut": false,
          "isSigner": false,
          "isOptional": true
        },
        {
          "name": "tokenSwap",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Token-swap"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userTransferAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "source",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_(A|B) SOURCE Account, amount is transferable by user transfer authority."
          ]
        },
        {
          "name": "swapTokenA",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_a Swap Account, may deposit INTO."
          ]
        },
        {
          "name": "swapTokenB",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_b Swap Account, may deposit INTO."
          ]
        },
        {
          "name": "poolMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Pool MINT account, swap authority is the owner."
          ]
        },
        {
          "name": "destination",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Pool Account to deposit the generated tokens, user is the owner."
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Pool Token program id."
          ]
        }
      ],
      "args": [
        {
          "name": "sourceTokenAmount",
          "type": "u64"
        },
        {
          "name": "minimumPoolTokenAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdrawSingleTokenType",
      "accounts": [
        {
          "name": "tokenSwap",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Token-swap"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "userTransferAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "poolMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Pool mint account, swap authority is the owner."
          ]
        },
        {
          "name": "source",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "SOURCE Pool account, amount is transferable by user transfer authority."
          ]
        },
        {
          "name": "swapTokenA",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_a Swap Account to potentially withdraw from."
          ]
        },
        {
          "name": "swapTokenB",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_b Swap Account to potentially withdraw from."
          ]
        },
        {
          "name": "destination",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_(A|B) User Account to credit."
          ]
        },
        {
          "name": "poolFee",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Fee account, to receive withdrawal fees."
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Pool Token program id."
          ]
        }
      ],
      "args": [
        {
          "name": "destinationTokenAmount",
          "type": "u64"
        },
        {
          "name": "maximumPoolTokenAmount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "update",
      "accounts": [
        {
          "name": "authority",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenSwap",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "swapPolicy",
          "type": {
            "option": "publicKey"
          }
        },
        {
          "name": "addLiquidityPolicy",
          "type": {
            "option": "publicKey"
          }
        }
      ]
    },
    {
      "name": "close",
      "accounts": [
        {
          "name": "authority",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "tokenSwap",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "swapTokenA",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_a Swap Account to potentially withdraw from."
          ]
        },
        {
          "name": "swapTokenB",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_b Swap Account to potentially withdraw from."
          ]
        },
        {
          "name": "destTokenA",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_a user Account to credit."
          ]
        },
        {
          "name": "destTokenB",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "token_b user Account to credit."
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Pool Token program id."
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    }
  ],
  "accounts": [
    {
      "name": "TokenSwap",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "isInitialized",
            "docs": [
              "Is the swap initialized, with data written to it"
            ],
            "type": "bool"
          },
          {
            "name": "bumpSeed",
            "docs": [
              "Bump seed used in program address.",
              "The program address is created deterministically with the bump seed,",
              "swap program id, and swap account pubkey.  This program address has",
              "authority over the swap's token A account, token B account, and pool",
              "token mint."
            ],
            "type": "u8"
          },
          {
            "name": "tokenProgramId",
            "docs": [
              "Program ID of the tokens being exchanged."
            ],
            "type": "publicKey"
          },
          {
            "name": "tokenA",
            "docs": [
              "Token A"
            ],
            "type": "publicKey"
          },
          {
            "name": "tokenB",
            "docs": [
              "Token B"
            ],
            "type": "publicKey"
          },
          {
            "name": "poolMint",
            "docs": [
              "Pool tokens are issued when A or B tokens are deposited.",
              "Pool tokens can be withdrawn back to the original A or B token."
            ],
            "type": "publicKey"
          },
          {
            "name": "tokenAMint",
            "docs": [
              "Mint information for token A"
            ],
            "type": "publicKey"
          },
          {
            "name": "tokenBMint",
            "docs": [
              "Mint information for token B"
            ],
            "type": "publicKey"
          },
          {
            "name": "poolFeeAccount",
            "docs": [
              "Pool token account to receive trading and / or withdrawal fees"
            ],
            "type": "publicKey"
          },
          {
            "name": "fees",
            "docs": [
              "All fee information"
            ],
            "type": {
              "defined": "FeesInfo"
            }
          },
          {
            "name": "curve",
            "docs": [
              "Swap curve parameters, to be unpacked and used by the SwapCurve, which",
              "calculates swaps, deposits, and withdrawals"
            ],
            "type": {
              "defined": "CurveInfo"
            }
          },
          {
            "name": "swapPolicy",
            "docs": [
              "Swap policy address (Albus)"
            ],
            "type": {
              "option": "publicKey"
            }
          },
          {
            "name": "addLiquidityPolicy",
            "docs": [
              "Add liquidity policy address (Albus)"
            ],
            "type": {
              "option": "publicKey"
            }
          },
          {
            "name": "reserved",
            "docs": [
              "Reserved for future use"
            ],
            "type": {
              "array": [
                "u8",
                64
              ]
            }
          }
        ]
      }
    }
  ],
  "types": [
    {
      "name": "CurveInfo",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "curveType",
            "type": "u8"
          },
          {
            "name": "curveParameters",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "FeesInfo",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "tradeFeeNumerator",
            "type": "u64"
          },
          {
            "name": "tradeFeeDenominator",
            "type": "u64"
          },
          {
            "name": "ownerTradeFeeNumerator",
            "type": "u64"
          },
          {
            "name": "ownerTradeFeeDenominator",
            "type": "u64"
          },
          {
            "name": "ownerWithdrawFeeNumerator",
            "type": "u64"
          },
          {
            "name": "ownerWithdrawFeeDenominator",
            "type": "u64"
          },
          {
            "name": "hostFeeNumerator",
            "type": "u64"
          },
          {
            "name": "hostFeeDenominator",
            "type": "u64"
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "AlreadyInUse",
      "msg": "Swap account already in use"
    },
    {
      "code": 6001,
      "name": "InvalidProgramAddress",
      "msg": "Invalid program address generated from bump seed and key"
    },
    {
      "code": 6002,
      "name": "InvalidOwner",
      "msg": "Input account owner is not the program address"
    },
    {
      "code": 6003,
      "name": "InvalidOutputOwner",
      "msg": "Output pool account owner cannot be the program address"
    },
    {
      "code": 6004,
      "name": "ExpectedMint",
      "msg": "Deserialized account is not an SPL Token mint"
    },
    {
      "code": 6005,
      "name": "ExpectedAccount",
      "msg": "Deserialized account is not an SPL Token account"
    },
    {
      "code": 6006,
      "name": "EmptySupply",
      "msg": "Input token account empty"
    },
    {
      "code": 6007,
      "name": "InvalidSupply",
      "msg": "Pool token mint has a non-zero supply"
    },
    {
      "code": 6008,
      "name": "InvalidDelegate",
      "msg": "Token account has a delegate"
    },
    {
      "code": 6009,
      "name": "InvalidInput",
      "msg": "InvalidInput"
    },
    {
      "code": 6010,
      "name": "IncorrectSwapAccount",
      "msg": "Address of the provided swap token account is incorrect"
    },
    {
      "code": 6011,
      "name": "IncorrectPoolMint",
      "msg": "Address of the provided pool token mint is incorrect"
    },
    {
      "code": 6012,
      "name": "InvalidOutput",
      "msg": "InvalidOutput"
    },
    {
      "code": 6013,
      "name": "CalculationFailure",
      "msg": "General calculation failure due to overflow or underflow"
    },
    {
      "code": 6014,
      "name": "InvalidInstruction",
      "msg": "Invalid instruction"
    },
    {
      "code": 6015,
      "name": "RepeatedMint",
      "msg": "Swap input token accounts have the same mint"
    },
    {
      "code": 6016,
      "name": "ExceededSlippage",
      "msg": "Swap instruction exceeds desired slippage limit"
    },
    {
      "code": 6017,
      "name": "InvalidCloseAuthority",
      "msg": "Token account has a close authority"
    },
    {
      "code": 6018,
      "name": "InvalidFreezeAuthority",
      "msg": "Pool token mint has a freeze authority"
    },
    {
      "code": 6019,
      "name": "IncorrectFeeAccount",
      "msg": "Pool fee token account incorrect"
    },
    {
      "code": 6020,
      "name": "ZeroTradingTokens",
      "msg": "Given pool token amount results in zero trading tokens"
    },
    {
      "code": 6021,
      "name": "FeeCalculationFailure",
      "msg": "Fee calculation failed due to overflow, underflow, or unexpected 0"
    },
    {
      "code": 6022,
      "name": "ConversionFailure",
      "msg": "Conversion to u64/u128 failed with an overflow or underflow"
    },
    {
      "code": 6023,
      "name": "InvalidFee",
      "msg": "The provided fee does not match the program owner's constraints"
    },
    {
      "code": 6024,
      "name": "IncorrectTokenProgramId",
      "msg": "The provided token program does not match the token program expected by the swap"
    },
    {
      "code": 6025,
      "name": "UnsupportedCurveType",
      "msg": "The provided curve type is not supported by the program owner"
    },
    {
      "code": 6026,
      "name": "InvalidCurve",
      "msg": "The provided curve parameters are invalid"
    },
    {
      "code": 6027,
      "name": "UnsupportedCurveOperation",
      "msg": "The operation cannot be performed on the given curve"
    }
  ],
  "metadata": {
    "address": "ASWfaoztykN8Lz1P2uwuvwWR61SvFrvn6acM1sJpxKtq",
    "origin": "anchor",
    "binaryVersion": "0.29.0",
    "libVersion": "0.29.0"
  }
}
