/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UpdatePolicy
 * @category generated
 */
export const updatePolicyStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'UpdatePolicyInstructionArgs'
)
/**
 * Accounts required by the _updatePolicy_ instruction
 *
 * @property [_writable_] tokenSwap
 * @category Instructions
 * @category UpdatePolicy
 * @category generated
 */
export type UpdatePolicyInstructionAccounts = {
  tokenSwap: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updatePolicyInstructionDiscriminator = [
  212, 245, 246, 7, 163, 151, 18, 57,
]

/**
 * Creates a _UpdatePolicy_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category UpdatePolicy
 * @category generated
 */
export function createUpdatePolicyInstruction(
  accounts: UpdatePolicyInstructionAccounts,
  programId = new web3.PublicKey('ASWfaoztykN8Lz1P2uwuvwWR61SvFrvn6acM1sJpxKtq')
) {
  const [data] = updatePolicyStruct.serialize({
    instructionDiscriminator: updatePolicyInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.tokenSwap,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
