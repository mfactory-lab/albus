/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category DepositAllTokenTypes
 * @category generated
 */
export interface DepositAllTokenTypesInstructionArgs {
  poolTokenAmount: beet.bignum
  maximumTokenAAmount: beet.bignum
  maximumTokenBAmount: beet.bignum
}
/**
 * @category Instructions
 * @category DepositAllTokenTypes
 * @category generated
 */
export const depositAllTokenTypesStruct = new beet.BeetArgsStruct<
  DepositAllTokenTypesInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['poolTokenAmount', beet.u64],
    ['maximumTokenAAmount', beet.u64],
    ['maximumTokenBAmount', beet.u64],
  ],
  'DepositAllTokenTypesInstructionArgs',
)
/**
 * Accounts required by the _depositAllTokenTypes_ instruction
 *
 * @property [] tokenSwap
 * @property [] authority
 * @property [**signer**] userTransferAuthorityInfo
 * @property [_writable_] sourceAInfo
 * @property [_writable_] sourceBInfo
 * @property [_writable_] tokenA
 * @property [_writable_] tokenB
 * @property [_writable_] poolMint
 * @property [_writable_] destination
 * @category Instructions
 * @category DepositAllTokenTypes
 * @category generated
 */
export interface DepositAllTokenTypesInstructionAccounts {
  tokenSwap: web3.PublicKey
  authority: web3.PublicKey
  userTransferAuthorityInfo: web3.PublicKey
  sourceAInfo: web3.PublicKey
  sourceBInfo: web3.PublicKey
  tokenA: web3.PublicKey
  tokenB: web3.PublicKey
  poolMint: web3.PublicKey
  destination: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const depositAllTokenTypesInstructionDiscriminator = [
  32, 95, 69, 60, 75, 79, 205, 238,
]

/**
 * Creates a _DepositAllTokenTypes_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DepositAllTokenTypes
 * @category generated
 */
export function createDepositAllTokenTypesInstruction(
  accounts: DepositAllTokenTypesInstructionAccounts,
  args: DepositAllTokenTypesInstructionArgs,
  programId = new web3.PublicKey('J8YCNcS2xDvowMcSzWrDYNguk5y9NWfGStNT4YsiKuea'),
) {
  const [data] = depositAllTokenTypesStruct.serialize({
    instructionDiscriminator: depositAllTokenTypesInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.tokenSwap,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.userTransferAuthorityInfo,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.sourceAInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.sourceBInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenA,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenB,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.poolMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.destination,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
