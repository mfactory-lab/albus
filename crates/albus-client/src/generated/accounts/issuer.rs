//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use solana_program::pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;


#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Issuer {
pub discriminator: [u8; 8],
/// Signing public key
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub pubkey: Pubkey,
/// Signing public key in zk format (BJJ Point)
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::Bytes>"))]
pub zk_pubkey: [u8; 64],
/// The authority of the issuer that manages the issuer
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub authority: Pubkey,
/// Issuer status
pub is_disabled: bool,
/// Creation date
pub created_at: i64,
/// PDA bump
pub bump: u8,
/// Uniq code of the issuer
pub code: String,
/// The name of the issuer
pub name: String,
/// Short description
pub description: String,
}


impl Issuer {
  
  
  
  #[inline(always)]
  pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
    let mut data = data;
    Self::deserialize(&mut data)
  }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for Issuer {
  type Error = std::io::Error;

  fn try_from(account_info: &solana_program::account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
      let mut data: &[u8] = &(*account_info.data).borrow();
      Self::deserialize(&mut data)
  }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for Issuer {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
      Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for Issuer {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for Issuer {
    fn owner() -> Pubkey {
      crate::ALBUS_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for Issuer {}


#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for Issuer {
  const DISCRIMINATOR: [u8; 8] = [0; 8];
}

