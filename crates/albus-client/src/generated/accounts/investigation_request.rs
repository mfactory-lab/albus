//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use solana_program::pubkey::Pubkey;
use crate::generated::types::InvestigationStatus;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;


#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InvestigationRequest {
pub discriminator: [u8; 8],
/// Investigation service authority public key
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub authority: Pubkey,
/// The key that is used for secret sharing encryption
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub encryption_key: Pubkey,
/// The [ProofRequest] associated with this request
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub proof_request: Pubkey,
/// The public key of the user who owns the [ProofRequest]
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub proof_request_owner: Pubkey,
/// The [ServiceProvider] associated with [ProofRequest]
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub service_provider: Pubkey,
/// Required number of shares used to reconstruct the secret
pub required_share_count: u8,
/// Revealed number of shares used to reconstruct the secret
pub revealed_share_count: u8,
/// Investigation processing status
pub status: InvestigationStatus,
/// Creation date
pub created_at: i64,
/// PDA bump
pub bump: u8,
/// [Trustee] accounts that were used for secret sharing
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<Vec<serde_with::DisplayFromStr>>"))]
pub trustees: Vec<Pubkey>,
}


impl InvestigationRequest {
  
  
  
  #[inline(always)]
  pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
    let mut data = data;
    Self::deserialize(&mut data)
  }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for InvestigationRequest {
  type Error = std::io::Error;

  fn try_from(account_info: &solana_program::account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
      let mut data: &[u8] = &(*account_info.data).borrow();
      Self::deserialize(&mut data)
  }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for InvestigationRequest {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
      Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for InvestigationRequest {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for InvestigationRequest {
    fn owner() -> Pubkey {
      crate::ALBUS_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for InvestigationRequest {}


#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for InvestigationRequest {
  const DISCRIMINATOR: [u8; 8] = [0; 8];
}

