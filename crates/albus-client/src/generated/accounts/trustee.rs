//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use solana_program::pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;


#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Trustee {
pub discriminator: [u8; 8],
/// Key that is used for secret sharing encryption.
/// BabyJub packed pubkey
pub key: [u8; 32],
/// The authority that manages the trustee
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub authority: Pubkey,
/// Name of the trustee
pub name: String,
/// Email of the trustee
pub email: String,
/// Website of the trustee
pub website: String,
/// Indicates whether the [Trustee] has been verified
pub is_verified: bool,
/// The number of revealed secret shares
pub revealed_share_count: u32,
/// Timestamp for when the trustee was registered
pub created_at: i64,
/// PDA bump
pub bump: u8,
}


impl Trustee {
  
  
  
  #[inline(always)]
  pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
    let mut data = data;
    Self::deserialize(&mut data)
  }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for Trustee {
  type Error = std::io::Error;

  fn try_from(account_info: &solana_program::account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
      let mut data: &[u8] = &(*account_info.data).borrow();
      Self::deserialize(&mut data)
  }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for Trustee {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
      Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for Trustee {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for Trustee {
    fn owner() -> Pubkey {
      crate::ALBUS_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for Trustee {}


#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for Trustee {
  const DISCRIMINATOR: [u8; 8] = [0; 8];
}

