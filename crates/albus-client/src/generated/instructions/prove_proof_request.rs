//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use crate::generated::types::ProofData;

/// Accounts.
pub struct ProveProofRequest {
      
              
          pub proof_request: solana_program::pubkey::Pubkey,
          
              
          pub circuit: solana_program::pubkey::Pubkey,
          
              
          pub policy: solana_program::pubkey::Pubkey,
          
              
          pub issuer: Option<solana_program::pubkey::Pubkey>,
          
              
          pub authority: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
      }

impl ProveProofRequest {
  pub fn instruction(&self, args: ProveProofRequestInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: ProveProofRequestInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.proof_request,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.circuit,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.policy,
            false
          ));
                                                      if let Some(issuer) = self.issuer {
              accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                issuer,
                false,
              ));
            } else {
              accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::ALBUS_ID,
                false,
              ));
            }
                                                    accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = ProveProofRequestInstructionData::new().try_to_vec().unwrap();
          let mut args = args.try_to_vec().unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::ALBUS_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct ProveProofRequestInstructionData {
            discriminator: [u8; 8],
                        }

impl ProveProofRequestInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [148, 131, 112, 65, 14, 251, 112, 208],
                                                            }
  }
}

impl Default for ProveProofRequestInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ProveProofRequestInstructionArgs {
                  pub proof: Option<ProofData>,
                pub public_inputs: Vec<[u8; 32]>,
                pub reset: bool,
      }


/// Instruction builder for `ProveProofRequest`.
///
/// ### Accounts:
///
                ///   0. `[writable]` proof_request
          ///   1. `[]` circuit
          ///   2. `[]` policy
                ///   3. `[optional]` issuer
                      ///   4. `[writable, signer]` authority
                ///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct ProveProofRequestBuilder {
            proof_request: Option<solana_program::pubkey::Pubkey>,
                circuit: Option<solana_program::pubkey::Pubkey>,
                policy: Option<solana_program::pubkey::Pubkey>,
                issuer: Option<solana_program::pubkey::Pubkey>,
                authority: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                        proof: Option<ProofData>,
                public_inputs: Option<Vec<[u8; 32]>>,
                reset: Option<bool>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ProveProofRequestBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn proof_request(&mut self, proof_request: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.proof_request = Some(proof_request);
                    self
    }
            #[inline(always)]
    pub fn circuit(&mut self, circuit: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.circuit = Some(circuit);
                    self
    }
            #[inline(always)]
    pub fn policy(&mut self, policy: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.policy = Some(policy);
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn issuer(&mut self, issuer: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
                        self.issuer = issuer;
                    self
    }
            #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    /// `[optional argument]`
#[inline(always)]
      pub fn proof(&mut self, proof: ProofData) -> &mut Self {
        self.proof = Some(proof);
        self
      }
                #[inline(always)]
      pub fn public_inputs(&mut self, public_inputs: Vec<[u8; 32]>) -> &mut Self {
        self.public_inputs = Some(public_inputs);
        self
      }
                #[inline(always)]
      pub fn reset(&mut self, reset: bool) -> &mut Self {
        self.reset = Some(reset);
        self
      }
        /// Add an aditional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = ProveProofRequest {
                              proof_request: self.proof_request.expect("proof_request is not set"),
                                        circuit: self.circuit.expect("circuit is not set"),
                                        policy: self.policy.expect("policy is not set"),
                                        issuer: self.issuer,
                                        authority: self.authority.expect("authority is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                      };
          let args = ProveProofRequestInstructionArgs {
                                                              proof: self.proof.clone(),
                                                                  public_inputs: self.public_inputs.clone().expect("public_inputs is not set"),
                                                                  reset: self.reset.clone().expect("reset is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `prove_proof_request` CPI accounts.
  pub struct ProveProofRequestCpiAccounts<'a, 'b> {
          
                    
              pub proof_request: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub circuit: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub policy: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub issuer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                
                    
              pub authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `prove_proof_request` CPI instruction.
pub struct ProveProofRequestCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub proof_request: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub circuit: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub policy: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub issuer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
          
              
          pub authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: ProveProofRequestInstructionArgs,
  }

impl<'a, 'b> ProveProofRequestCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: ProveProofRequestCpiAccounts<'a, 'b>,
              args: ProveProofRequestInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              proof_request: accounts.proof_request,
              circuit: accounts.circuit,
              policy: accounts.policy,
              issuer: accounts.issuer,
              authority: accounts.authority,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.proof_request.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.circuit.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.policy.key,
            false
          ));
                                          if let Some(issuer) = self.issuer {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
              *issuer.key,
              false,
            ));
          } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
              crate::ALBUS_ID,
              false,
            ));
          }
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = ProveProofRequestInstructionData::new().try_to_vec().unwrap();
          let mut args = self.__args.try_to_vec().unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::ALBUS_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(6 + 1 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.proof_request.clone());
                        account_infos.push(self.circuit.clone());
                        account_infos.push(self.policy.clone());
                        if let Some(issuer) = self.issuer {
          account_infos.push(issuer.clone());
        }
                        account_infos.push(self.authority.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `ProveProofRequest` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` proof_request
          ///   1. `[]` circuit
          ///   2. `[]` policy
                ///   3. `[optional]` issuer
                      ///   4. `[writable, signer]` authority
          ///   5. `[]` system_program
#[derive(Clone, Debug)]
pub struct ProveProofRequestCpiBuilder<'a, 'b> {
  instruction: Box<ProveProofRequestCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ProveProofRequestCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(ProveProofRequestCpiBuilderInstruction {
      __program: program,
              proof_request: None,
              circuit: None,
              policy: None,
              issuer: None,
              authority: None,
              system_program: None,
                                            proof: None,
                                public_inputs: None,
                                reset: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn proof_request(&mut self, proof_request: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.proof_request = Some(proof_request);
                    self
    }
      #[inline(always)]
    pub fn circuit(&mut self, circuit: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.circuit = Some(circuit);
                    self
    }
      #[inline(always)]
    pub fn policy(&mut self, policy: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.policy = Some(policy);
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn issuer(&mut self, issuer: Option<&'b solana_program::account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.issuer = issuer;
                    self
    }
      #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    /// `[optional argument]`
#[inline(always)]
      pub fn proof(&mut self, proof: ProofData) -> &mut Self {
        self.instruction.proof = Some(proof);
        self
      }
                #[inline(always)]
      pub fn public_inputs(&mut self, public_inputs: Vec<[u8; 32]>) -> &mut Self {
        self.instruction.public_inputs = Some(public_inputs);
        self
      }
                #[inline(always)]
      pub fn reset(&mut self, reset: bool) -> &mut Self {
        self.instruction.reset = Some(reset);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = ProveProofRequestInstructionArgs {
                                                              proof: self.instruction.proof.clone(),
                                                                  public_inputs: self.instruction.public_inputs.clone().expect("public_inputs is not set"),
                                                                  reset: self.instruction.reset.clone().expect("reset is not set"),
                                    };
        let instruction = ProveProofRequestCpi {
        __program: self.instruction.__program,
                  
          proof_request: self.instruction.proof_request.expect("proof_request is not set"),
                  
          circuit: self.instruction.circuit.expect("circuit is not set"),
                  
          policy: self.instruction.policy.expect("policy is not set"),
                  
          issuer: self.instruction.issuer,
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct ProveProofRequestCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            proof_request: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                circuit: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                policy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                issuer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        proof: Option<ProofData>,
                public_inputs: Option<Vec<[u8; 32]>>,
                reset: Option<bool>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

