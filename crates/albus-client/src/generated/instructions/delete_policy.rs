//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct DeletePolicy {
      
              
          pub service_provider: solana_program::pubkey::Pubkey,
          
              
          pub policy: solana_program::pubkey::Pubkey,
          
              
          pub authority: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
      }

impl DeletePolicy {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.service_provider,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.policy,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = DeletePolicyInstructionData::new().try_to_vec().unwrap();
    
    solana_program::instruction::Instruction {
      program_id: crate::ALBUS_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct DeletePolicyInstructionData {
            discriminator: [u8; 8],
      }

impl DeletePolicyInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [15, 80, 151, 21, 231, 64, 246, 198],
                  }
  }
}

impl Default for DeletePolicyInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `DeletePolicy`.
///
/// ### Accounts:
///
                ///   0. `[writable]` service_provider
                ///   1. `[writable]` policy
                      ///   2. `[writable, signer]` authority
                ///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct DeletePolicyBuilder {
            service_provider: Option<solana_program::pubkey::Pubkey>,
                policy: Option<solana_program::pubkey::Pubkey>,
                authority: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DeletePolicyBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn service_provider(&mut self, service_provider: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.service_provider = Some(service_provider);
                    self
    }
            #[inline(always)]
    pub fn policy(&mut self, policy: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.policy = Some(policy);
                    self
    }
            #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// Add an aditional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = DeletePolicy {
                              service_provider: self.service_provider.expect("service_provider is not set"),
                                        policy: self.policy.expect("policy is not set"),
                                        authority: self.authority.expect("authority is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `delete_policy` CPI accounts.
  pub struct DeletePolicyCpiAccounts<'a, 'b> {
          
                    
              pub service_provider: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub policy: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `delete_policy` CPI instruction.
pub struct DeletePolicyCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub service_provider: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub policy: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
        }

impl<'a, 'b> DeletePolicyCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: DeletePolicyCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              service_provider: accounts.service_provider,
              policy: accounts.policy,
              authority: accounts.authority,
              system_program: accounts.system_program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.service_provider.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.policy.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = DeletePolicyInstructionData::new().try_to_vec().unwrap();
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::ALBUS_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(4 + 1 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.service_provider.clone());
                        account_infos.push(self.policy.clone());
                        account_infos.push(self.authority.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `DeletePolicy` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` service_provider
                ///   1. `[writable]` policy
                      ///   2. `[writable, signer]` authority
          ///   3. `[]` system_program
#[derive(Clone, Debug)]
pub struct DeletePolicyCpiBuilder<'a, 'b> {
  instruction: Box<DeletePolicyCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DeletePolicyCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(DeletePolicyCpiBuilderInstruction {
      __program: program,
              service_provider: None,
              policy: None,
              authority: None,
              system_program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn service_provider(&mut self, service_provider: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.service_provider = Some(service_provider);
                    self
    }
      #[inline(always)]
    pub fn policy(&mut self, policy: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.policy = Some(policy);
                    self
    }
      #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
        let instruction = DeletePolicyCpi {
        __program: self.instruction.__program,
                  
          service_provider: self.instruction.service_provider.expect("service_provider is not set"),
                  
          policy: self.instruction.policy.expect("policy is not set"),
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct DeletePolicyCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            service_provider: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                policy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

