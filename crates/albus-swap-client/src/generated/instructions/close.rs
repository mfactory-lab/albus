//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct Close {
      
              
          pub authority: solana_program::pubkey::Pubkey,
          
              
          pub token_swap: solana_program::pubkey::Pubkey,
                /// token_a Swap Account to potentially withdraw from.

    
              
          pub swap_token_a: solana_program::pubkey::Pubkey,
                /// token_b Swap Account to potentially withdraw from.

    
              
          pub swap_token_b: solana_program::pubkey::Pubkey,
                /// token_a user Account to credit.

    
              
          pub dest_token_a: solana_program::pubkey::Pubkey,
                /// token_b user Account to credit.

    
              
          pub dest_token_b: solana_program::pubkey::Pubkey,
          
              
          pub payer: solana_program::pubkey::Pubkey,
                /// Pool Token program id.

    
              
          pub token_program: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
      }

impl Close {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_swap,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.swap_token_a,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.swap_token_b,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.dest_token_a,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.dest_token_b,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = CloseInstructionData::new().try_to_vec().unwrap();
    
    solana_program::instruction::Instruction {
      program_id: crate::ALBUS_SWAP_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct CloseInstructionData {
            discriminator: [u8; 8],
      }

impl CloseInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [98, 165, 201, 177, 108, 65, 206, 96],
                  }
  }
}

impl Default for CloseInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `Close`.
///
/// ### Accounts:
///
          ///   0. `[]` authority
                ///   1. `[writable]` token_swap
                ///   2. `[writable]` swap_token_a
                ///   3. `[writable]` swap_token_b
                ///   4. `[writable]` dest_token_a
                ///   5. `[writable]` dest_token_b
                      ///   6. `[writable, signer]` payer
                ///   7. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
                ///   8. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CloseBuilder {
            authority: Option<solana_program::pubkey::Pubkey>,
                token_swap: Option<solana_program::pubkey::Pubkey>,
                swap_token_a: Option<solana_program::pubkey::Pubkey>,
                swap_token_b: Option<solana_program::pubkey::Pubkey>,
                dest_token_a: Option<solana_program::pubkey::Pubkey>,
                dest_token_b: Option<solana_program::pubkey::Pubkey>,
                payer: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CloseBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            #[inline(always)]
    pub fn token_swap(&mut self, token_swap: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_swap = Some(token_swap);
                    self
    }
            /// token_a Swap Account to potentially withdraw from.
#[inline(always)]
    pub fn swap_token_a(&mut self, swap_token_a: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.swap_token_a = Some(swap_token_a);
                    self
    }
            /// token_b Swap Account to potentially withdraw from.
#[inline(always)]
    pub fn swap_token_b(&mut self, swap_token_b: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.swap_token_b = Some(swap_token_b);
                    self
    }
            /// token_a user Account to credit.
#[inline(always)]
    pub fn dest_token_a(&mut self, dest_token_a: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.dest_token_a = Some(dest_token_a);
                    self
    }
            /// token_b user Account to credit.
#[inline(always)]
    pub fn dest_token_b(&mut self, dest_token_b: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.dest_token_b = Some(dest_token_b);
                    self
    }
            #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.payer = Some(payer);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
/// Pool Token program id.
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// Add an aditional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = Close {
                              authority: self.authority.expect("authority is not set"),
                                        token_swap: self.token_swap.expect("token_swap is not set"),
                                        swap_token_a: self.swap_token_a.expect("swap_token_a is not set"),
                                        swap_token_b: self.swap_token_b.expect("swap_token_b is not set"),
                                        dest_token_a: self.dest_token_a.expect("dest_token_a is not set"),
                                        dest_token_b: self.dest_token_b.expect("dest_token_b is not set"),
                                        payer: self.payer.expect("payer is not set"),
                                        token_program: self.token_program.unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `close` CPI accounts.
  pub struct CloseCpiAccounts<'a, 'b> {
          
                    
              pub authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_swap: &'b solana_program::account_info::AccountInfo<'a>,
                        /// token_a Swap Account to potentially withdraw from.

      
                    
              pub swap_token_a: &'b solana_program::account_info::AccountInfo<'a>,
                        /// token_b Swap Account to potentially withdraw from.

      
                    
              pub swap_token_b: &'b solana_program::account_info::AccountInfo<'a>,
                        /// token_a user Account to credit.

      
                    
              pub dest_token_a: &'b solana_program::account_info::AccountInfo<'a>,
                        /// token_b user Account to credit.

      
                    
              pub dest_token_b: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub payer: &'b solana_program::account_info::AccountInfo<'a>,
                        /// Pool Token program id.

      
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `close` CPI instruction.
pub struct CloseCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_swap: &'b solana_program::account_info::AccountInfo<'a>,
                /// token_a Swap Account to potentially withdraw from.

    
              
          pub swap_token_a: &'b solana_program::account_info::AccountInfo<'a>,
                /// token_b Swap Account to potentially withdraw from.

    
              
          pub swap_token_b: &'b solana_program::account_info::AccountInfo<'a>,
                /// token_a user Account to credit.

    
              
          pub dest_token_a: &'b solana_program::account_info::AccountInfo<'a>,
                /// token_b user Account to credit.

    
              
          pub dest_token_b: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub payer: &'b solana_program::account_info::AccountInfo<'a>,
                /// Pool Token program id.

    
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
        }

impl<'a, 'b> CloseCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: CloseCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              authority: accounts.authority,
              token_swap: accounts.token_swap,
              swap_token_a: accounts.swap_token_a,
              swap_token_b: accounts.swap_token_b,
              dest_token_a: accounts.dest_token_a,
              dest_token_b: accounts.dest_token_b,
              payer: accounts.payer,
              token_program: accounts.token_program,
              system_program: accounts.system_program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_swap.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swap_token_a.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swap_token_b.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.dest_token_a.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.dest_token_b.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = CloseInstructionData::new().try_to_vec().unwrap();
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::ALBUS_SWAP_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(9 + 1 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.authority.clone());
                        account_infos.push(self.token_swap.clone());
                        account_infos.push(self.swap_token_a.clone());
                        account_infos.push(self.swap_token_b.clone());
                        account_infos.push(self.dest_token_a.clone());
                        account_infos.push(self.dest_token_b.clone());
                        account_infos.push(self.payer.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `Close` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` authority
                ///   1. `[writable]` token_swap
                ///   2. `[writable]` swap_token_a
                ///   3. `[writable]` swap_token_b
                ///   4. `[writable]` dest_token_a
                ///   5. `[writable]` dest_token_b
                      ///   6. `[writable, signer]` payer
          ///   7. `[]` token_program
          ///   8. `[]` system_program
#[derive(Clone, Debug)]
pub struct CloseCpiBuilder<'a, 'b> {
  instruction: Box<CloseCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CloseCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(CloseCpiBuilderInstruction {
      __program: program,
              authority: None,
              token_swap: None,
              swap_token_a: None,
              swap_token_b: None,
              dest_token_a: None,
              dest_token_b: None,
              payer: None,
              token_program: None,
              system_program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      #[inline(always)]
    pub fn token_swap(&mut self, token_swap: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_swap = Some(token_swap);
                    self
    }
      /// token_a Swap Account to potentially withdraw from.
#[inline(always)]
    pub fn swap_token_a(&mut self, swap_token_a: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.swap_token_a = Some(swap_token_a);
                    self
    }
      /// token_b Swap Account to potentially withdraw from.
#[inline(always)]
    pub fn swap_token_b(&mut self, swap_token_b: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.swap_token_b = Some(swap_token_b);
                    self
    }
      /// token_a user Account to credit.
#[inline(always)]
    pub fn dest_token_a(&mut self, dest_token_a: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.dest_token_a = Some(dest_token_a);
                    self
    }
      /// token_b user Account to credit.
#[inline(always)]
    pub fn dest_token_b(&mut self, dest_token_b: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.dest_token_b = Some(dest_token_b);
                    self
    }
      #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.payer = Some(payer);
                    self
    }
      /// Pool Token program id.
#[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
        let instruction = CloseCpi {
        __program: self.instruction.__program,
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          token_swap: self.instruction.token_swap.expect("token_swap is not set"),
                  
          swap_token_a: self.instruction.swap_token_a.expect("swap_token_a is not set"),
                  
          swap_token_b: self.instruction.swap_token_b.expect("swap_token_b is not set"),
                  
          dest_token_a: self.instruction.dest_token_a.expect("dest_token_a is not set"),
                  
          dest_token_b: self.instruction.dest_token_b.expect("dest_token_b is not set"),
                  
          payer: self.instruction.payer.expect("payer is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct CloseCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_swap: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                swap_token_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                swap_token_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                dest_token_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                dest_token_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

