//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct DepositAllTokenTypes {
      
              
          pub proof_request: Option<solana_program::pubkey::Pubkey>,
                /// Token-swap

    
              
          pub token_swap: solana_program::pubkey::Pubkey,
          
              
          pub authority: solana_program::pubkey::Pubkey,
          
              
          pub user_transfer_authority: solana_program::pubkey::Pubkey,
                /// token_a user transfer authority can transfer amount.

    
              
          pub user_token_a: solana_program::pubkey::Pubkey,
                /// token_b user transfer authority can transfer amount.

    
              
          pub user_token_b: solana_program::pubkey::Pubkey,
                /// token_a Base Account to deposit into.

    
              
          pub swap_token_a: solana_program::pubkey::Pubkey,
                /// token_b Base Account to deposit into.

    
              
          pub swap_token_b: solana_program::pubkey::Pubkey,
                /// Pool MINT account, swap authority is the owner.

    
              
          pub pool_mint: solana_program::pubkey::Pubkey,
                /// Pool Account to deposit the generated tokens, user is the owner.

    
              
          pub destination: solana_program::pubkey::Pubkey,
                /// Pool Token program id.

    
              
          pub token_program: solana_program::pubkey::Pubkey,
      }

impl DepositAllTokenTypes {
  pub fn instruction(&self, args: DepositAllTokenTypesInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: DepositAllTokenTypesInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
                                        if let Some(proof_request) = self.proof_request {
              accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                proof_request,
                false,
              ));
            } else {
              accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::ALBUS_SWAP_ID,
                false,
              ));
            }
                                                    accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_swap,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user_transfer_authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_a,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_b,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.swap_token_a,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.swap_token_b,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.destination,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = DepositAllTokenTypesInstructionData::new().try_to_vec().unwrap();
          let mut args = args.try_to_vec().unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::ALBUS_SWAP_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct DepositAllTokenTypesInstructionData {
            discriminator: [u8; 8],
                        }

impl DepositAllTokenTypesInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [32, 95, 69, 60, 75, 79, 205, 238],
                                                            }
  }
}

impl Default for DepositAllTokenTypesInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositAllTokenTypesInstructionArgs {
                  pub pool_token_amount: u64,
                pub maximum_token_a_amount: u64,
                pub maximum_token_b_amount: u64,
      }


/// Instruction builder for `DepositAllTokenTypes`.
///
/// ### Accounts:
///
                ///   0. `[optional]` proof_request
          ///   1. `[]` token_swap
          ///   2. `[]` authority
                ///   3. `[signer]` user_transfer_authority
                ///   4. `[writable]` user_token_a
                ///   5. `[writable]` user_token_b
                ///   6. `[writable]` swap_token_a
                ///   7. `[writable]` swap_token_b
                ///   8. `[writable]` pool_mint
                ///   9. `[writable]` destination
                ///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct DepositAllTokenTypesBuilder {
            proof_request: Option<solana_program::pubkey::Pubkey>,
                token_swap: Option<solana_program::pubkey::Pubkey>,
                authority: Option<solana_program::pubkey::Pubkey>,
                user_transfer_authority: Option<solana_program::pubkey::Pubkey>,
                user_token_a: Option<solana_program::pubkey::Pubkey>,
                user_token_b: Option<solana_program::pubkey::Pubkey>,
                swap_token_a: Option<solana_program::pubkey::Pubkey>,
                swap_token_b: Option<solana_program::pubkey::Pubkey>,
                pool_mint: Option<solana_program::pubkey::Pubkey>,
                destination: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                        pool_token_amount: Option<u64>,
                maximum_token_a_amount: Option<u64>,
                maximum_token_b_amount: Option<u64>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DepositAllTokenTypesBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// `[optional account]`
#[inline(always)]
    pub fn proof_request(&mut self, proof_request: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
                        self.proof_request = proof_request;
                    self
    }
            /// Token-swap
#[inline(always)]
    pub fn token_swap(&mut self, token_swap: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_swap = Some(token_swap);
                    self
    }
            #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            #[inline(always)]
    pub fn user_transfer_authority(&mut self, user_transfer_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user_transfer_authority = Some(user_transfer_authority);
                    self
    }
            /// token_a user transfer authority can transfer amount.
#[inline(always)]
    pub fn user_token_a(&mut self, user_token_a: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user_token_a = Some(user_token_a);
                    self
    }
            /// token_b user transfer authority can transfer amount.
#[inline(always)]
    pub fn user_token_b(&mut self, user_token_b: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.user_token_b = Some(user_token_b);
                    self
    }
            /// token_a Base Account to deposit into.
#[inline(always)]
    pub fn swap_token_a(&mut self, swap_token_a: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.swap_token_a = Some(swap_token_a);
                    self
    }
            /// token_b Base Account to deposit into.
#[inline(always)]
    pub fn swap_token_b(&mut self, swap_token_b: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.swap_token_b = Some(swap_token_b);
                    self
    }
            /// Pool MINT account, swap authority is the owner.
#[inline(always)]
    pub fn pool_mint(&mut self, pool_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.pool_mint = Some(pool_mint);
                    self
    }
            /// Pool Account to deposit the generated tokens, user is the owner.
#[inline(always)]
    pub fn destination(&mut self, destination: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.destination = Some(destination);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
/// Pool Token program id.
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
                    #[inline(always)]
      pub fn pool_token_amount(&mut self, pool_token_amount: u64) -> &mut Self {
        self.pool_token_amount = Some(pool_token_amount);
        self
      }
                #[inline(always)]
      pub fn maximum_token_a_amount(&mut self, maximum_token_a_amount: u64) -> &mut Self {
        self.maximum_token_a_amount = Some(maximum_token_a_amount);
        self
      }
                #[inline(always)]
      pub fn maximum_token_b_amount(&mut self, maximum_token_b_amount: u64) -> &mut Self {
        self.maximum_token_b_amount = Some(maximum_token_b_amount);
        self
      }
        /// Add an aditional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = DepositAllTokenTypes {
                              proof_request: self.proof_request,
                                        token_swap: self.token_swap.expect("token_swap is not set"),
                                        authority: self.authority.expect("authority is not set"),
                                        user_transfer_authority: self.user_transfer_authority.expect("user_transfer_authority is not set"),
                                        user_token_a: self.user_token_a.expect("user_token_a is not set"),
                                        user_token_b: self.user_token_b.expect("user_token_b is not set"),
                                        swap_token_a: self.swap_token_a.expect("swap_token_a is not set"),
                                        swap_token_b: self.swap_token_b.expect("swap_token_b is not set"),
                                        pool_mint: self.pool_mint.expect("pool_mint is not set"),
                                        destination: self.destination.expect("destination is not set"),
                                        token_program: self.token_program.unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                      };
          let args = DepositAllTokenTypesInstructionArgs {
                                                              pool_token_amount: self.pool_token_amount.clone().expect("pool_token_amount is not set"),
                                                                  maximum_token_a_amount: self.maximum_token_a_amount.clone().expect("maximum_token_a_amount is not set"),
                                                                  maximum_token_b_amount: self.maximum_token_b_amount.clone().expect("maximum_token_b_amount is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `deposit_all_token_types` CPI accounts.
  pub struct DepositAllTokenTypesCpiAccounts<'a, 'b> {
          
                    
              pub proof_request: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        /// Token-swap

      
                    
              pub token_swap: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,
                        /// token_a user transfer authority can transfer amount.

      
                    
              pub user_token_a: &'b solana_program::account_info::AccountInfo<'a>,
                        /// token_b user transfer authority can transfer amount.

      
                    
              pub user_token_b: &'b solana_program::account_info::AccountInfo<'a>,
                        /// token_a Base Account to deposit into.

      
                    
              pub swap_token_a: &'b solana_program::account_info::AccountInfo<'a>,
                        /// token_b Base Account to deposit into.

      
                    
              pub swap_token_b: &'b solana_program::account_info::AccountInfo<'a>,
                        /// Pool MINT account, swap authority is the owner.

      
                    
              pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,
                        /// Pool Account to deposit the generated tokens, user is the owner.

      
                    
              pub destination: &'b solana_program::account_info::AccountInfo<'a>,
                        /// Pool Token program id.

      
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `deposit_all_token_types` CPI instruction.
pub struct DepositAllTokenTypesCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub proof_request: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                /// Token-swap

    
              
          pub token_swap: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,
                /// token_a user transfer authority can transfer amount.

    
              
          pub user_token_a: &'b solana_program::account_info::AccountInfo<'a>,
                /// token_b user transfer authority can transfer amount.

    
              
          pub user_token_b: &'b solana_program::account_info::AccountInfo<'a>,
                /// token_a Base Account to deposit into.

    
              
          pub swap_token_a: &'b solana_program::account_info::AccountInfo<'a>,
                /// token_b Base Account to deposit into.

    
              
          pub swap_token_b: &'b solana_program::account_info::AccountInfo<'a>,
                /// Pool MINT account, swap authority is the owner.

    
              
          pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,
                /// Pool Account to deposit the generated tokens, user is the owner.

    
              
          pub destination: &'b solana_program::account_info::AccountInfo<'a>,
                /// Pool Token program id.

    
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: DepositAllTokenTypesInstructionArgs,
  }

impl<'a, 'b> DepositAllTokenTypesCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: DepositAllTokenTypesCpiAccounts<'a, 'b>,
              args: DepositAllTokenTypesInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              proof_request: accounts.proof_request,
              token_swap: accounts.token_swap,
              authority: accounts.authority,
              user_transfer_authority: accounts.user_transfer_authority,
              user_token_a: accounts.user_token_a,
              user_token_b: accounts.user_token_b,
              swap_token_a: accounts.swap_token_a,
              swap_token_b: accounts.swap_token_b,
              pool_mint: accounts.pool_mint,
              destination: accounts.destination,
              token_program: accounts.token_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
                            if let Some(proof_request) = self.proof_request {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
              *proof_request.key,
              false,
            ));
          } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
              crate::ALBUS_SWAP_ID,
              false,
            ));
          }
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_swap.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user_transfer_authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_a.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_b.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swap_token_a.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swap_token_b.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.destination.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = DepositAllTokenTypesInstructionData::new().try_to_vec().unwrap();
          let mut args = self.__args.try_to_vec().unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::ALBUS_SWAP_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(11 + 1 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  if let Some(proof_request) = self.proof_request {
          account_infos.push(proof_request.clone());
        }
                        account_infos.push(self.token_swap.clone());
                        account_infos.push(self.authority.clone());
                        account_infos.push(self.user_transfer_authority.clone());
                        account_infos.push(self.user_token_a.clone());
                        account_infos.push(self.user_token_b.clone());
                        account_infos.push(self.swap_token_a.clone());
                        account_infos.push(self.swap_token_b.clone());
                        account_infos.push(self.pool_mint.clone());
                        account_infos.push(self.destination.clone());
                        account_infos.push(self.token_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `DepositAllTokenTypes` via CPI.
///
/// ### Accounts:
///
                ///   0. `[optional]` proof_request
          ///   1. `[]` token_swap
          ///   2. `[]` authority
                ///   3. `[signer]` user_transfer_authority
                ///   4. `[writable]` user_token_a
                ///   5. `[writable]` user_token_b
                ///   6. `[writable]` swap_token_a
                ///   7. `[writable]` swap_token_b
                ///   8. `[writable]` pool_mint
                ///   9. `[writable]` destination
          ///   10. `[]` token_program
#[derive(Clone, Debug)]
pub struct DepositAllTokenTypesCpiBuilder<'a, 'b> {
  instruction: Box<DepositAllTokenTypesCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DepositAllTokenTypesCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(DepositAllTokenTypesCpiBuilderInstruction {
      __program: program,
              proof_request: None,
              token_swap: None,
              authority: None,
              user_transfer_authority: None,
              user_token_a: None,
              user_token_b: None,
              swap_token_a: None,
              swap_token_b: None,
              pool_mint: None,
              destination: None,
              token_program: None,
                                            pool_token_amount: None,
                                maximum_token_a_amount: None,
                                maximum_token_b_amount: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      /// `[optional account]`
#[inline(always)]
    pub fn proof_request(&mut self, proof_request: Option<&'b solana_program::account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.proof_request = proof_request;
                    self
    }
      /// Token-swap
#[inline(always)]
    pub fn token_swap(&mut self, token_swap: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_swap = Some(token_swap);
                    self
    }
      #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      #[inline(always)]
    pub fn user_transfer_authority(&mut self, user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_transfer_authority = Some(user_transfer_authority);
                    self
    }
      /// token_a user transfer authority can transfer amount.
#[inline(always)]
    pub fn user_token_a(&mut self, user_token_a: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_token_a = Some(user_token_a);
                    self
    }
      /// token_b user transfer authority can transfer amount.
#[inline(always)]
    pub fn user_token_b(&mut self, user_token_b: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_token_b = Some(user_token_b);
                    self
    }
      /// token_a Base Account to deposit into.
#[inline(always)]
    pub fn swap_token_a(&mut self, swap_token_a: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.swap_token_a = Some(swap_token_a);
                    self
    }
      /// token_b Base Account to deposit into.
#[inline(always)]
    pub fn swap_token_b(&mut self, swap_token_b: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.swap_token_b = Some(swap_token_b);
                    self
    }
      /// Pool MINT account, swap authority is the owner.
#[inline(always)]
    pub fn pool_mint(&mut self, pool_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.pool_mint = Some(pool_mint);
                    self
    }
      /// Pool Account to deposit the generated tokens, user is the owner.
#[inline(always)]
    pub fn destination(&mut self, destination: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.destination = Some(destination);
                    self
    }
      /// Pool Token program id.
#[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
                    #[inline(always)]
      pub fn pool_token_amount(&mut self, pool_token_amount: u64) -> &mut Self {
        self.instruction.pool_token_amount = Some(pool_token_amount);
        self
      }
                #[inline(always)]
      pub fn maximum_token_a_amount(&mut self, maximum_token_a_amount: u64) -> &mut Self {
        self.instruction.maximum_token_a_amount = Some(maximum_token_a_amount);
        self
      }
                #[inline(always)]
      pub fn maximum_token_b_amount(&mut self, maximum_token_b_amount: u64) -> &mut Self {
        self.instruction.maximum_token_b_amount = Some(maximum_token_b_amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = DepositAllTokenTypesInstructionArgs {
                                                              pool_token_amount: self.instruction.pool_token_amount.clone().expect("pool_token_amount is not set"),
                                                                  maximum_token_a_amount: self.instruction.maximum_token_a_amount.clone().expect("maximum_token_a_amount is not set"),
                                                                  maximum_token_b_amount: self.instruction.maximum_token_b_amount.clone().expect("maximum_token_b_amount is not set"),
                                    };
        let instruction = DepositAllTokenTypesCpi {
        __program: self.instruction.__program,
                  
          proof_request: self.instruction.proof_request,
                  
          token_swap: self.instruction.token_swap.expect("token_swap is not set"),
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          user_transfer_authority: self.instruction.user_transfer_authority.expect("user_transfer_authority is not set"),
                  
          user_token_a: self.instruction.user_token_a.expect("user_token_a is not set"),
                  
          user_token_b: self.instruction.user_token_b.expect("user_token_b is not set"),
                  
          swap_token_a: self.instruction.swap_token_a.expect("swap_token_a is not set"),
                  
          swap_token_b: self.instruction.swap_token_b.expect("swap_token_b is not set"),
                  
          pool_mint: self.instruction.pool_mint.expect("pool_mint is not set"),
                  
          destination: self.instruction.destination.expect("destination is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct DepositAllTokenTypesCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            proof_request: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_swap: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                user_transfer_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                user_token_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                user_token_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                swap_token_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                swap_token_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                pool_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                destination: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        pool_token_amount: Option<u64>,
                maximum_token_a_amount: Option<u64>,
                maximum_token_b_amount: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

