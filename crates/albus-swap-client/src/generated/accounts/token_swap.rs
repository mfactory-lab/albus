//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use solana_program::pubkey::Pubkey;
use crate::generated::types::FeesInfo;
use crate::generated::types::CurveInfo;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;


#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TokenSwap {
pub discriminator: [u8; 8],
/// Is the swap initialized, with data written to it
pub is_initialized: bool,
/// Bump seed used in program address.
/// The program address is created deterministically with the bump seed,
/// swap program id, and swap account pubkey.  This program address has
/// authority over the swap's token A account, token B account, and pool
/// token mint.
pub bump_seed: u8,
/// Program ID of the tokens being exchanged.
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub token_program_id: Pubkey,
/// Token A
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub token_a: Pubkey,
/// Token B
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub token_b: Pubkey,
/// Pool tokens are issued when A or B tokens are deposited.
/// Pool tokens can be withdrawn back to the original A or B token.
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub pool_mint: Pubkey,
/// Mint information for token A
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub token_a_mint: Pubkey,
/// Mint information for token B
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub token_b_mint: Pubkey,
/// Pool token account to receive trading and / or withdrawal fees
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub pool_fee_account: Pubkey,
/// All fee information
pub fees: FeesInfo,
/// Swap curve parameters, to be unpacked and used by the SwapCurve, which
/// calculates swaps, deposits, and withdrawals
pub curve: CurveInfo,
/// Swap policy address (Albus)
pub swap_policy: Option<Pubkey>,
/// Add liquidity policy address (Albus)
pub add_liquidity_policy: Option<Pubkey>,
/// Reserved for future use
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::Bytes>"))]
pub reserved: [u8; 64],
}


impl TokenSwap {
  
  
  
  #[inline(always)]
  pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
    let mut data = data;
    Self::deserialize(&mut data)
  }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for TokenSwap {
  type Error = std::io::Error;

  fn try_from(account_info: &solana_program::account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
      let mut data: &[u8] = &(*account_info.data).borrow();
      Self::deserialize(&mut data)
  }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for TokenSwap {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
      Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for TokenSwap {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for TokenSwap {
    fn owner() -> Pubkey {
      crate::ALBUS_SWAP_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for TokenSwap {}


#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for TokenSwap {
  const DISCRIMINATOR: [u8; 8] = [0; 8];
}

