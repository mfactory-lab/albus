mod state;

use anchor_lang::prelude::*;
// use bls12_381::{Bls12, G1Affine, G2Affine, Scalar};
// use groth16::{Proof, VerificationKey};

declare_id!("8Q3WDsNM7cBy7xSXqZMhR2LzGfGKgYAdWWLPKpj9orJb");

fn get_vk() -> VerificationKey<Bls12> {
    VerificationKey::<Bls12> {
        alpha_g1: G1Affine::from_uncompressed_unchecked(&[
            3, 157, 80, 195, 94, 61, 117, 111, 206, 174, 116, 201, 247, 94, 173, 238, 205, 100, 49,
            5, 76, 187, 123, 27, 128, 130, 167, 18, 250, 42, 221, 94, 83, 203, 18, 103, 187, 17,
            159, 110, 156, 163, 12, 32, 234, 36, 160, 104, 22, 41, 251, 81, 31, 94, 80, 185, 93,
            113, 195, 157, 76, 239, 163, 206, 239, 70, 159, 65, 102, 97, 36, 187, 154, 204, 207,
            137, 137, 32, 236, 243, 160, 70, 59, 115, 131, 219, 99, 39, 118, 85, 247, 62, 0, 156,
            33, 243,
        ])
        .unwrap(),
        beta_g1: G1Affine::from_uncompressed_unchecked(&[
            17, 112, 154, 16, 243, 3, 193, 6, 130, 224, 252, 196, 52, 5, 136, 108, 135, 2, 195, 74,
            34, 169, 63, 127, 234, 221, 14, 206, 253, 197, 138, 60, 168, 72, 141, 177, 171, 67,
            147, 251, 86, 105, 109, 43, 253, 79, 48, 81, 5, 164, 0, 208, 25, 28, 135, 77, 123, 204,
            253, 50, 70, 98, 117, 63, 54, 62, 12, 230, 218, 205, 41, 240, 24, 221, 171, 144, 73,
            190, 61, 245, 181, 204, 70, 91, 31, 46, 197, 225, 27, 32, 144, 81, 6, 91, 44, 218,
        ])
        .unwrap(),
        beta_g2: G2Affine::from_uncompressed_unchecked(&[
            12, 213, 123, 127, 100, 5, 4, 105, 143, 235, 82, 3, 213, 107, 112, 222, 30, 77, 42, 54,
            36, 129, 195, 223, 253, 203, 195, 168, 51, 27, 94, 209, 192, 206, 143, 250, 253, 212,
            72, 98, 207, 95, 4, 73, 55, 45, 65, 90, 4, 183, 55, 154, 79, 224, 171, 248, 125, 97,
            114, 162, 156, 119, 57, 89, 166, 38, 117, 234, 45, 24, 48, 242, 53, 232, 179, 2, 32,
            243, 187, 34, 104, 46, 210, 176, 19, 214, 66, 19, 117, 38, 198, 30, 32, 139, 118, 206,
            17, 23, 134, 167, 87, 242, 179, 137, 165, 252, 208, 20, 225, 186, 90, 114, 75, 133,
            163, 240, 10, 229, 76, 121, 171, 135, 233, 59, 96, 135, 254, 178, 33, 213, 217, 7, 224,
            35, 144, 1, 243, 73, 192, 14, 98, 108, 205, 31, 19, 193, 200, 113, 19, 204, 4, 205, 92,
            146, 139, 253, 137, 223, 250, 23, 233, 63, 26, 31, 153, 215, 20, 217, 212, 189, 243,
            48, 189, 217, 232, 193, 83, 61, 18, 169, 85, 212, 108, 202, 77, 219, 126, 48, 241, 129,
            79, 79,
        ])
        .unwrap(),
        gamma_g2: G2Affine::from_uncompressed_unchecked(&[
            23, 34, 236, 232, 130, 76, 245, 37, 132, 186, 181, 243, 85, 11, 9, 187, 173, 109, 178,
            17, 93, 88, 144, 40, 9, 104, 198, 34, 122, 46, 161, 154, 102, 17, 33, 79, 208, 159,
            191, 94, 107, 211, 17, 200, 186, 228, 231, 117, 7, 249, 166, 231, 202, 181, 247, 140,
            103, 232, 145, 227, 156, 176, 105, 145, 249, 47, 75, 120, 114, 253, 148, 16, 189, 239,
            214, 105, 181, 183, 98, 201, 137, 112, 202, 72, 55, 50, 125, 130, 39, 208, 183, 209,
            190, 31, 95, 243, 17, 120, 4, 79, 222, 117, 117, 24, 11, 230, 48, 112, 104, 60, 235,
            120, 99, 132, 38, 24, 124, 3, 166, 224, 155, 38, 158, 85, 187, 31, 64, 91, 184, 228,
            53, 79, 92, 47, 99, 232, 106, 55, 216, 176, 124, 151, 188, 80, 1, 28, 51, 47, 38, 90,
            92, 32, 36, 176, 187, 27, 241, 167, 111, 181, 161, 20, 149, 87, 112, 152, 109, 182, 17,
            52, 99, 47, 33, 107, 60, 114, 60, 23, 89, 89, 4, 159, 121, 59, 40, 194, 208, 130, 170,
            217, 182, 15,
        ])
        .unwrap(),
        delta_g1: G1Affine::from_uncompressed_unchecked(&[
            1, 120, 248, 244, 84, 10, 40, 128, 51, 156, 19, 63, 235, 11, 237, 110, 166, 220, 207,
            199, 6, 203, 116, 243, 237, 31, 44, 69, 35, 37, 44, 178, 219, 145, 193, 26, 246, 198,
            19, 243, 231, 153, 52, 220, 90, 19, 205, 212, 20, 107, 138, 243, 229, 222, 95, 230,
            111, 173, 67, 153, 94, 80, 137, 93, 233, 151, 214, 15, 26, 41, 240, 75, 36, 174, 159,
            38, 199, 188, 88, 135, 101, 252, 111, 32, 85, 240, 7, 200, 228, 172, 192, 73, 134, 173,
            198, 69,
        ])
        .unwrap(),
        delta_g2: G2Affine::from_uncompressed_unchecked(&[
            15, 239, 249, 225, 1, 139, 136, 130, 226, 182, 242, 97, 209, 229, 249, 188, 91, 142,
            21, 43, 25, 174, 81, 100, 158, 34, 57, 224, 142, 153, 76, 204, 71, 102, 162, 36, 53,
            113, 59, 204, 193, 118, 116, 202, 222, 95, 36, 233, 25, 149, 184, 181, 141, 35, 78,
            109, 102, 16, 201, 215, 114, 42, 80, 39, 4, 81, 184, 83, 220, 33, 212, 97, 0, 188, 4,
            88, 21, 121, 95, 152, 240, 34, 181, 199, 81, 136, 144, 195, 183, 8, 215, 89, 247, 142,
            201, 13, 2, 52, 248, 109, 102, 37, 152, 223, 75, 180, 82, 160, 221, 252, 146, 66, 236,
            102, 127, 89, 254, 8, 112, 235, 65, 217, 30, 146, 28, 218, 12, 88, 151, 196, 232, 222,
            215, 247, 200, 112, 155, 154, 211, 251, 249, 31, 247, 244, 13, 84, 204, 74, 85, 101,
            69, 102, 225, 10, 204, 233, 2, 147, 230, 232, 226, 64, 94, 126, 182, 194, 244, 190,
            100, 163, 137, 49, 180, 120, 87, 10, 116, 74, 173, 77, 5, 9, 223, 10, 38, 140, 184, 14,
            74, 21, 33, 138,
        ])
        .unwrap(),
        ic: vec![
            G1Affine::from_uncompressed_unchecked(&[
                16, 182, 113, 68, 70, 130, 203, 58, 252, 69, 178, 3, 130, 51, 51, 0, 97, 74, 21,
                198, 210, 109, 43, 191, 252, 62, 214, 18, 100, 146, 168, 164, 34, 117, 162, 146,
                116, 50, 53, 82, 65, 195, 51, 119, 49, 167, 145, 71, 19, 95, 8, 209, 12, 131, 231,
                242, 208, 35, 88, 246, 73, 80, 134, 221, 113, 226, 148, 193, 212, 33, 166, 121,
                167, 96, 156, 112, 30, 186, 193, 148, 59, 52, 165, 133, 101, 78, 10, 249, 65, 149,
                153, 185, 117, 167, 138, 240,
            ])
            .unwrap(),
            G1Affine::from_uncompressed_unchecked(&[
                25, 13, 157, 5, 104, 102, 225, 253, 197, 51, 208, 161, 73, 140, 90, 176, 90, 129,
                195, 8, 169, 167, 109, 173, 97, 50, 208, 173, 187, 175, 187, 35, 249, 46, 79, 37,
                91, 125, 65, 238, 238, 124, 83, 5, 221, 250, 183, 59, 22, 15, 38, 44, 220, 230, 91,
                100, 78, 139, 98, 137, 244, 178, 64, 78, 43, 118, 152, 90, 192, 77, 87, 251, 164,
                151, 127, 16, 225, 90, 78, 122, 18, 154, 54, 74, 243, 103, 56, 187, 14, 24, 209,
                80, 96, 0, 53, 144,
            ])
            .unwrap(),
        ],
    }
}

fn get_proof() -> Proof<Bls12> {
    Proof::<Bls12> {
        a: G1Affine::from_uncompressed_unchecked(&[
            23, 144, 215, 251, 218, 195, 188, 22, 211, 222, 186, 115, 52, 168, 174, 123, 36, 102,
            121, 27, 225, 87, 78, 46, 24, 66, 228, 133, 91, 180, 228, 4, 244, 231, 208, 189, 198,
            120, 43, 174, 106, 15, 159, 30, 190, 51, 7, 231, 16, 84, 71, 110, 64, 103, 80, 170,
            172, 185, 121, 45, 72, 232, 244, 61, 159, 231, 100, 7, 65, 125, 49, 248, 216, 67, 128,
            183, 111, 46, 111, 179, 13, 228, 174, 14, 11, 102, 31, 151, 207, 208, 248, 200, 36,
            121, 131, 36,
        ])
        .unwrap(),
        b: G2Affine::from_uncompressed_unchecked(&[
            10, 200, 53, 9, 157, 80, 143, 219, 217, 222, 29, 199, 175, 24, 105, 79, 146, 89, 99,
            56, 252, 103, 119, 65, 127, 166, 217, 32, 97, 38, 181, 222, 20, 165, 142, 201, 8, 229,
            93, 201, 208, 22, 144, 167, 32, 213, 107, 208, 5, 36, 112, 96, 41, 75, 25, 240, 43,
            255, 147, 140, 138, 254, 217, 213, 166, 130, 78, 23, 94, 114, 100, 50, 110, 231, 112,
            242, 94, 147, 35, 123, 230, 74, 62, 61, 197, 8, 14, 252, 12, 15, 247, 157, 49, 222, 42,
            7, 10, 198, 173, 66, 104, 236, 59, 248, 173, 1, 117, 35, 239, 238, 115, 138, 215, 37,
            39, 32, 49, 127, 163, 12, 31, 64, 150, 22, 1, 234, 81, 121, 233, 163, 53, 253, 201, 19,
            237, 128, 15, 169, 177, 39, 220, 47, 247, 8, 3, 191, 153, 179, 9, 218, 243, 161, 47,
            216, 6, 144, 37, 201, 187, 183, 182, 107, 155, 74, 70, 106, 144, 203, 129, 26, 168, 91,
            68, 72, 93, 77, 240, 172, 76, 247, 0, 212, 215, 15, 38, 241, 92, 74, 186, 52, 157, 129,
        ])
        .unwrap(),
        c: G1Affine::from_uncompressed_unchecked(&[
            1, 150, 235, 135, 173, 29, 149, 50, 211, 58, 70, 166, 149, 130, 164, 12, 249, 139, 194,
            159, 241, 55, 88, 135, 217, 162, 181, 191, 218, 125, 207, 171, 217, 78, 58, 190, 186,
            95, 174, 100, 41, 97, 118, 229, 71, 112, 143, 68, 16, 192, 187, 109, 217, 250, 193, 94,
            221, 64, 160, 234, 133, 215, 68, 30, 226, 18, 217, 16, 55, 54, 158, 150, 131, 161, 6,
            231, 185, 103, 198, 88, 8, 211, 209, 101, 128, 21, 40, 29, 5, 84, 5, 243, 10, 85, 138,
            114,
        ])
        .unwrap(),
    }
}

#[program]
pub mod albus {
    use std::str::FromStr;

    use anchor_lang::solana_program::log::sol_log_compute_units;

    use super::*;

    pub fn verify_proof(ctx: Context<VerifyProof>) -> Result<()> {
        // let vk = get_vk();
        // let proof = get_proof();
        // let x = Scalar::from(u64::from_str("35").unwrap());
        // groth16::verifier::verify_proof::<Bls12>(&proof, &[x], &vk).unwrap();
        //
        // // Log the number of compute units remaining that the program can consume.
        // sol_log_compute_units();

        Ok(())
    }
}

#[error_code]
pub enum ErrorCode {
    #[msg("Unauthorized action")]
    Unauthorized,
}

#[derive(Accounts)]
pub struct InitProof<'info> {
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct VerifyProof<'info> {
    #[account(mut)]
    pub authority: Signer<'info>,
    pub system_program: Program<'info, System>,
}
